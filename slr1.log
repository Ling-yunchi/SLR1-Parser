12:53:59 [INFO] tokens:
12:53:59 [INFO] value: "int", type: Keyword
12:53:59 [INFO] value: "main", type: Identifier
12:53:59 [INFO] value: "(", type: Delimiter
12:53:59 [INFO] value: "int", type: Keyword
12:53:59 [INFO] value: "a", type: Identifier
12:53:59 [INFO] value: ",", type: Delimiter
12:53:59 [INFO] value: "int", type: Keyword
12:53:59 [INFO] value: "b", type: Identifier
12:53:59 [INFO] value: ")", type: Delimiter
12:53:59 [INFO] value: "{", type: Delimiter
12:53:59 [INFO] value: "int", type: Keyword
12:53:59 [INFO] value: "res", type: Identifier
12:53:59 [INFO] value: ";", type: Delimiter
12:53:59 [INFO] value: "res", type: Identifier
12:53:59 [INFO] value: "=", type: Operator
12:53:59 [INFO] value: "a", type: Identifier
12:53:59 [INFO] value: "+", type: Operator
12:53:59 [INFO] value: "b", type: Identifier
12:53:59 [INFO] value: ";", type: Delimiter
12:53:59 [INFO] value: "int", type: Keyword
12:53:59 [INFO] value: "c", type: Identifier
12:53:59 [INFO] value: "=", type: Operator
12:53:59 [INFO] value: "1.14514", type: Constant
12:53:59 [INFO] value: ";", type: Delimiter
12:53:59 [INFO] value: "int", type: Keyword
12:53:59 [INFO] value: "d", type: Identifier
12:53:59 [INFO] value: "=", type: Operator
12:53:59 [INFO] value: "a", type: Identifier
12:53:59 [INFO] value: ";", type: Delimiter
12:53:59 [INFO] value: "if", type: Keyword
12:53:59 [INFO] value: "(", type: Delimiter
12:53:59 [INFO] value: "a", type: Identifier
12:53:59 [INFO] value: "<", type: Operator
12:53:59 [INFO] value: "0", type: Constant
12:53:59 [INFO] value: ")", type: Delimiter
12:53:59 [INFO] value: "{", type: Delimiter
12:53:59 [INFO] value: "res", type: Identifier
12:53:59 [INFO] value: "=", type: Operator
12:53:59 [INFO] value: "-", type: Operator
12:53:59 [INFO] value: "a", type: Identifier
12:53:59 [INFO] value: ";", type: Delimiter
12:53:59 [INFO] value: "}", type: Delimiter
12:53:59 [INFO] value: "else", type: Keyword
12:53:59 [INFO] value: "{", type: Delimiter
12:53:59 [INFO] value: "while", type: Keyword
12:53:59 [INFO] value: "(", type: Delimiter
12:53:59 [INFO] value: "b", type: Identifier
12:53:59 [INFO] value: ">", type: Operator
12:53:59 [INFO] value: "0", type: Constant
12:53:59 [INFO] value: ")", type: Delimiter
12:53:59 [INFO] value: "{", type: Delimiter
12:53:59 [INFO] value: "b", type: Identifier
12:53:59 [INFO] value: "=", type: Operator
12:53:59 [INFO] value: "b", type: Identifier
12:53:59 [INFO] value: "-", type: Operator
12:53:59 [INFO] value: "1", type: Constant
12:53:59 [INFO] value: ";", type: Delimiter
12:54:00 [INFO] value: "}", type: Delimiter
12:54:00 [INFO] value: "res", type: Identifier
12:54:00 [INFO] value: "=", type: Operator
12:54:00 [INFO] value: "0", type: Constant
12:54:00 [INFO] value: ";", type: Delimiter
12:54:00 [INFO] value: "}", type: Delimiter
12:54:00 [INFO] value: "}", type: Delimiter
12:54:00 [INFO] grammar:
12:54:00 [INFO] s: 程序
12:54:00 [INFO] v: ["程序'", "程序", "函数定义", "形式参数", "代码块", "变量类型", "算术表达式", "布尔表达式", "比较运算符", "算术运算符"]
12:54:00 [INFO] t: ["id", "value", "(", ")", "{", "}", ",", ";", "=", "while", "if", "else", "return", "int", "float", "double", "bool", "char", "&&", "||", "!", "true", "false", "<", ">", "<=", ">=", "==", "!=", "-", "+", "*", "/"]
12:54:00 [INFO] p:
12:54:00 [INFO]   "程序'" -> "程序"
12:54:00 [INFO]   "程序" -> "函数定义"
12:54:00 [INFO]   "函数定义" -> "函数定义" "函数定义"
12:54:00 [INFO]   "函数定义" -> "变量类型" "id" "(" ")" "{" "代码块" "}"
12:54:00 [INFO]   "函数定义" -> "变量类型" "id" "(" "形式参数" ")" "{" "代码块" "}"
12:54:00 [INFO]   "形式参数" -> "变量类型" "id"
12:54:00 [INFO]   "形式参数" -> "变量类型" "id" "," "形式参数"
12:54:00 [INFO]   "代码块" -> "代码块" "代码块"
12:54:00 [INFO]   "代码块" -> "变量类型" "id" ";"
12:54:00 [INFO]   "代码块" -> "变量类型" "id" "=" "算术表达式" ";"
12:54:00 [INFO]   "代码块" -> "id" "=" "算术表达式" ";"
12:54:00 [INFO]   "代码块" -> "while" "(" "布尔表达式" ")" "{" "代码块" "}"
12:54:00 [INFO]   "代码块" -> "if" "(" "布尔表达式" ")" "{" "代码块" "}"
12:54:00 [INFO]   "代码块" -> "if" "(" "布尔表达式" ")" "{" "代码块" "}" "else" "{" "代码块" "}"
12:54:00 [INFO]   "代码块" -> "return" ";"
12:54:00 [INFO]   "代码块" -> "return" "算术表达式" ";"
12:54:00 [INFO]   "变量类型" -> "int"
12:54:00 [INFO]   "变量类型" -> "float"
12:54:00 [INFO]   "变量类型" -> "double"
12:54:00 [INFO]   "变量类型" -> "bool"
12:54:00 [INFO]   "变量类型" -> "char"
12:54:00 [INFO]   "算术表达式" -> "算术表达式" "算术运算符" "算术表达式"
12:54:00 [INFO]   "算术表达式" -> "-" "算术表达式"
12:54:00 [INFO]   "算术表达式" -> "(" "算术表达式" ")"
12:54:00 [INFO]   "算术表达式" -> "id"
12:54:00 [INFO]   "算术表达式" -> "value"
12:54:00 [INFO]   "布尔表达式" -> "算术表达式" "比较运算符" "算术表达式"
12:54:00 [INFO]   "布尔表达式" -> "布尔表达式" "&&" "布尔表达式"
12:54:00 [INFO]   "布尔表达式" -> "布尔表达式" "||" "布尔表达式"
12:54:00 [INFO]   "布尔表达式" -> "!" "布尔表达式"
12:54:00 [INFO]   "布尔表达式" -> "(" "布尔表达式" ")"
12:54:00 [INFO]   "布尔表达式" -> "true"
12:54:00 [INFO]   "布尔表达式" -> "false"
12:54:00 [INFO]   "比较运算符" -> "<"
12:54:00 [INFO]   "比较运算符" -> ">"
12:54:00 [INFO]   "比较运算符" -> "<="
12:54:00 [INFO]   "比较运算符" -> ">="
12:54:00 [INFO]   "比较运算符" -> "=="
12:54:00 [INFO]   "比较运算符" -> "!="
12:54:00 [INFO]   "算术运算符" -> "+"
12:54:00 [INFO]   "算术运算符" -> "-"
12:54:00 [INFO]   "算术运算符" -> "*"
12:54:00 [INFO]   "算术运算符" -> "/"
12:54:00 [INFO] first:
12:54:00 [INFO] FIRST("布尔表达式") = ["!", "(", "-", "false", "id", "true", "value"]
12:54:00 [INFO] FIRST("形式参数") = ["bool", "char", "double", "float", "int"]
12:54:00 [INFO] FIRST("double") = ["double"]
12:54:00 [INFO] FIRST("{") = ["{"]
12:54:00 [INFO] FIRST("<=") = ["<="]
12:54:00 [INFO] FIRST("if") = ["if"]
12:54:00 [INFO] FIRST("!") = ["!"]
12:54:00 [INFO] FIRST(";") = [";"]
12:54:00 [INFO] FIRST("<") = ["<"]
12:54:00 [INFO] FIRST("while") = ["while"]
12:54:00 [INFO] FIRST("bool") = ["bool"]
12:54:00 [INFO] FIRST("=") = ["="]
12:54:00 [INFO] FIRST("==") = ["=="]
12:54:00 [INFO] FIRST("}") = ["}"]
12:54:00 [INFO] FIRST("程序'") = []
12:54:00 [INFO] FIRST("程序") = []
12:54:00 [INFO] FIRST(",") = [","]
12:54:00 [INFO] FIRST("!=") = ["!="]
12:54:00 [INFO] FIRST("变量类型") = ["bool", "char", "double", "float", "int"]
12:54:00 [INFO] FIRST("比较运算符") = ["!=", "<", "<=", "==", ">", ">="]
12:54:00 [INFO] FIRST("算术运算符") = ["*", "+", "-", "/"]
12:54:00 [INFO] FIRST("true") = ["true"]
12:54:00 [INFO] FIRST("id") = ["id"]
12:54:00 [INFO] FIRST("char") = ["char"]
12:54:00 [INFO] FIRST(">=") = [">="]
12:54:00 [INFO] FIRST("/") = ["/"]
12:54:00 [INFO] FIRST("||") = ["||"]
12:54:00 [INFO] FIRST("return") = ["return"]
12:54:00 [INFO] FIRST("value") = ["value"]
12:54:00 [INFO] FIRST(")") = [")"]
12:54:00 [INFO] FIRST("float") = ["float"]
12:54:00 [INFO] FIRST(">") = [">"]
12:54:00 [INFO] FIRST("+") = ["+"]
12:54:00 [INFO] FIRST("*") = ["*"]
12:54:00 [INFO] FIRST("&&") = ["&&"]
12:54:00 [INFO] FIRST("-") = ["-"]
12:54:00 [INFO] FIRST("int") = ["int"]
12:54:00 [INFO] FIRST("(") = ["("]
12:54:00 [INFO] FIRST("false") = ["false"]
12:54:00 [INFO] FIRST("函数定义") = ["bool", "char", "double", "float", "int"]
12:54:00 [INFO] FIRST("else") = ["else"]
12:54:00 [INFO] FIRST("代码块") = ["bool", "char", "double", "float", "id", "if", "int", "return", "while"]
12:54:00 [INFO] FIRST("算术表达式") = ["(", "-", "id", "value"]
12:54:00 [INFO] follow:
12:54:00 [INFO] FOLLOW("形式参数") = [")"]
12:54:00 [INFO] FOLLOW("布尔表达式") = ["&&", ")", "||"]
12:54:00 [INFO] FOLLOW("程序") = ["#"]
12:54:00 [INFO] FOLLOW("变量类型") = ["id"]
12:54:00 [INFO] FOLLOW("比较运算符") = ["(", "-", "id", "value"]
12:54:00 [INFO] FOLLOW("函数定义") = ["#", "bool", "char", "double", "float", "int"]
12:54:00 [INFO] FOLLOW("算术运算符") = ["(", "-", "id", "value"]
12:54:00 [INFO] FOLLOW("代码块") = ["bool", "char", "double", "float", "id", "if", "int", "return", "while", "}"]
12:54:00 [INFO] FOLLOW("程序'") = []
12:54:00 [INFO] FOLLOW("算术表达式") = ["!=", ")", "*", "+", "-", "/", ";", "<", "<=", "==", ">", ">="]
12:54:02 [INFO] action:
12:54:02 [INFO]       id    value (     )     {     }     ,     ;     =     while if    else  returnint   float doublebool  char  &&    ||    !     true  false <     >     <=    >=    ==    !=    -     +     *     /     #     
12:54:02 [INFO] 0                                                                                   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 1                                                                                                                                                                                                           acc   
12:54:02 [INFO] 2                                                                                   s4    s5    s6    s7    s8                                                                                              r1    
12:54:02 [INFO] 3     s10                                                                                                                                                                                                         
12:54:02 [INFO] 4     r16                                                                                                                                                                                                         
12:54:02 [INFO] 5     r17                                                                                                                                                                                                         
12:54:02 [INFO] 6     r18                                                                                                                                                                                                         
12:54:02 [INFO] 7     r19                                                                                                                                                                                                         
12:54:02 [INFO] 8     r20                                                                                                                                                                                                         
12:54:02 [INFO] 9                                                                                   s4    s5    s6    s7    s8                                                                                              r2    
12:54:02 [INFO] 10                s11                                                                                                                                                                                             
12:54:02 [INFO] 11                      s14                                                         s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 12                      s15                                                                                                                                                                                       
12:54:02 [INFO] 13    s16                                                                                                                                                                                                         
12:54:02 [INFO] 14                            s17                                                                                                                                                                                 
12:54:02 [INFO] 15                            s18                                                                                                                                                                                 
12:54:02 [INFO] 16                      r5                s19                                                                                                                                                                     
12:54:02 [INFO] 17    s22                                                   s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 18    s22                                                   s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 19                                                                                  s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 20    s22                           s29                     s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 21    s30                                                                                                                                                                                                         
12:54:02 [INFO] 22                                                    s31                                                                                                                                                         
12:54:02 [INFO] 23                s32                                                                                                                                                                                             
12:54:02 [INFO] 24                s33                                                                                                                                                                                             
12:54:02 [INFO] 25    s35   s36   s37                           s38                                                                                                                                 s39                           
12:54:02 [INFO] 26    s22                           s40                     s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 27                      r6                                                                                                                                                                                        
12:54:02 [INFO] 28    s22                           r7                      s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 29                                                                                  r3    r3    r3    r3    r3                                                                                              r3    
12:54:02 [INFO] 30                                              s41   s42                                                                                                                                                         
12:54:02 [INFO] 31    s35   s36   s37                                                                                                                                                               s39                           
12:54:02 [INFO] 32    s35   s36   s46                                                                                                         s47   s48   s49                                       s39                           
12:54:02 [INFO] 33    s35   s36   s46                                                                                                         s47   s48   s49                                       s39                           
12:54:02 [INFO] 34                                              s52                                                                                                                                 s53   s54   s55   s56         
12:54:02 [INFO] 35                      r24                     r24                                                                                             r24   r24   r24   r24   r24   r24   r24   r24   r24   r24         
12:54:02 [INFO] 36                      r25                     r25                                                                                             r25   r25   r25   r25   r25   r25   r25   r25   r25   r25         
12:54:02 [INFO] 37    s35   s36   s37                                                                                                                                                               s39                           
12:54:02 [INFO] 38    r14                           r14                     r14   r14         r14   r14   r14   r14   r14   r14                                                                                                   
12:54:02 [INFO] 39    s35   s36   s37                                                                                                                                                               s39                           
12:54:02 [INFO] 40                                                                                  r4    r4    r4    r4    r4                                                                                              r4    
12:54:02 [INFO] 41    r8                            r8                      r8    r8          r8    r8    r8    r8    r8    r8                                                                                                    
12:54:02 [INFO] 42    s35   s36   s37                                                                                                                                                               s39                           
12:54:02 [INFO] 43                                              s60                                                                                                                                 s53   s54   s55   s56         
12:54:02 [INFO] 44                                                                                                                                              s62   s63   s64   s65   s66   s67   s53   s54   s55   s56         
12:54:02 [INFO] 45                      s68                                                                                       s69   s70                                                                                       
12:54:02 [INFO] 46    s35   s36   s46                                                                                                         s47   s48   s49                                       s39                           
12:54:02 [INFO] 47    s35   s36   s46                                                                                                         s47   s48   s49                                       s39                           
12:54:02 [INFO] 48                      r31                                                                                       r31   r31                                                                                       
12:54:02 [INFO] 49                      r32                                                                                       r32   r32                                                                                       
12:54:02 [INFO] 50                      s74                                                                                       s69   s70                                                                                       
12:54:02 [INFO] 51    s35   s36   s37                                                                                                                                                               s39                           
12:54:02 [INFO] 52    r15                           r15                     r15   r15         r15   r15   r15   r15   r15   r15                                                                                                   
12:54:02 [INFO] 53    r40   r40   r40                                                                                                                                                               r40                           
12:54:02 [INFO] 54    r39   r39   r39                                                                                                                                                               r39                           
12:54:02 [INFO] 55    r41   r41   r41                                                                                                                                                               r41                           
12:54:02 [INFO] 56    r42   r42   r42                                                                                                                                                               r42                           
12:54:02 [INFO] 57                      s76                                                                                                                                                         s53   s54   s55   s56         
12:54:02 [INFO] 58                      r22                     r22                                                                                             r22   r22   r22   r22   r22   r22   s53   s54   s55   s56         
12:54:02 [INFO] 59                                              s77                                                                                                                                 s53   s54   s55   s56         
12:54:02 [INFO] 60    r10                           r10                     r10   r10         r10   r10   r10   r10   r10   r10                                                                                                   
12:54:02 [INFO] 61    s35   s36   s37                                                                                                                                                               s39                           
12:54:02 [INFO] 62    r33   r33   r33                                                                                                                                                               r33                           
12:54:02 [INFO] 63    r34   r34   r34                                                                                                                                                               r34                           
12:54:02 [INFO] 64    r35   r35   r35                                                                                                                                                               r35                           
12:54:02 [INFO] 65    r36   r36   r36                                                                                                                                                               r36                           
12:54:02 [INFO] 66    r37   r37   r37                                                                                                                                                               r37                           
12:54:02 [INFO] 67    r38   r38   r38                                                                                                                                                               r38                           
12:54:02 [INFO] 68                            s79                                                                                                                                                                                 
12:54:02 [INFO] 69    s35   s36   s46                                                                                                         s47   s48   s49                                       s39                           
12:54:02 [INFO] 70    s35   s36   s46                                                                                                         s47   s48   s49                                       s39                           
12:54:02 [INFO] 71                      s76                                                                                                                     s62   s63   s64   s65   s66   s67   s53   s54   s55   s56         
12:54:02 [INFO] 72                      s82                                                                                       s69   s70                                                                                       
12:54:02 [INFO] 73                      r29                                                                                       s69   s70                                                                                       
12:54:02 [INFO] 74                            s83                                                                                                                                                                                 
12:54:02 [INFO] 75                      r21                     r21                                                                                             r21   r21   r21   r21   r21   r21   s53   s54   s55   s56         
12:54:02 [INFO] 76                      r23                     r23                                                                                             r23   r23   r23   r23   r23   r23   r23   r23   r23   r23         
12:54:02 [INFO] 77    r9                            r9                      r9    r9          r9    r9    r9    r9    r9    r9                                                                                                    
12:54:02 [INFO] 78                      r26                                                                                       r26   r26                                                         s53   s54   s55   s56         
12:54:02 [INFO] 79    s22                                                   s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 80                      r27                                                                                       s69   s70                                                                                       
12:54:02 [INFO] 81                      r28                                                                                       s69   s70                                                                                       
12:54:02 [INFO] 82                      r30                                                                                       r30   r30                                                                                       
12:54:02 [INFO] 83    s22                                                   s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 84    s22                           s86                     s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 85    s22                           s87                     s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 86    r11                           r11                     r11   r11         r11   r11   r11   r11   r11   r11                                                                                                   
12:54:02 [INFO] 87    r12                           r12                     r12   r12   s88   r12   r12   r12   r12   r12   r12                                                                                                   
12:54:02 [INFO] 88                            s89                                                                                                                                                                                 
12:54:02 [INFO] 89    s22                                                   s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 90    s22                           s91                     s23   s24         s25   s4    s5    s6    s7    s8                                                                                                    
12:54:02 [INFO] 91    r13                           r13                     r13   r13         r13   r13   r13   r13   r13   r13                                                                                                   
12:54:02 [INFO] goto:
12:54:02 [INFO]           程序'       程序        函数定义      形式参数      代码块       变量类型      算术表达式     布尔表达式     比较运算符     算术运算符     
12:54:02 [INFO] 0                   1         2                             3                                                 
12:54:02 [INFO] 1                                                                                                             
12:54:02 [INFO] 2                             9                             3                                                 
12:54:02 [INFO] 3                                                                                                             
12:54:02 [INFO] 4                                                                                                             
12:54:02 [INFO] 5                                                                                                             
12:54:02 [INFO] 6                                                                                                             
12:54:02 [INFO] 7                                                                                                             
12:54:02 [INFO] 8                                                                                                             
12:54:02 [INFO] 9                             9                             3                                                 
12:54:02 [INFO] 10                                                                                                            
12:54:02 [INFO] 11                                      12                  13                                                
12:54:02 [INFO] 12                                                                                                            
12:54:02 [INFO] 13                                                                                                            
12:54:02 [INFO] 14                                                                                                            
12:54:02 [INFO] 15                                                                                                            
12:54:02 [INFO] 16                                                                                                            
12:54:02 [INFO] 17                                                20        21                                                
12:54:02 [INFO] 18                                                26        21                                                
12:54:02 [INFO] 19                                      27                  13                                                
12:54:02 [INFO] 20                                                28        21                                                
12:54:02 [INFO] 21                                                                                                            
12:54:02 [INFO] 22                                                                                                            
12:54:02 [INFO] 23                                                                                                            
12:54:02 [INFO] 24                                                                                                            
12:54:02 [INFO] 25                                                                    34                                      
12:54:02 [INFO] 26                                                28        21                                                
12:54:02 [INFO] 27                                                                                                            
12:54:02 [INFO] 28                                                28        21                                                
12:54:02 [INFO] 29                                                                                                            
12:54:02 [INFO] 30                                                                                                            
12:54:02 [INFO] 31                                                                    43                                      
12:54:02 [INFO] 32                                                                    44        45                            
12:54:02 [INFO] 33                                                                    44        50                            
12:54:02 [INFO] 34                                                                                                  51        
12:54:02 [INFO] 35                                                                                                            
12:54:02 [INFO] 36                                                                                                            
12:54:02 [INFO] 37                                                                    57                                      
12:54:02 [INFO] 38                                                                                                            
12:54:02 [INFO] 39                                                                    58                                      
12:54:02 [INFO] 40                                                                                                            
12:54:02 [INFO] 41                                                                                                            
12:54:02 [INFO] 42                                                                    59                                      
12:54:02 [INFO] 43                                                                                                  51        
12:54:02 [INFO] 44                                                                                        61        51        
12:54:02 [INFO] 45                                                                                                            
12:54:02 [INFO] 46                                                                    71        72                            
12:54:02 [INFO] 47                                                                    44        73                            
12:54:02 [INFO] 48                                                                                                            
12:54:02 [INFO] 49                                                                                                            
12:54:02 [INFO] 50                                                                                                            
12:54:02 [INFO] 51                                                                    75                                      
12:54:02 [INFO] 52                                                                                                            
12:54:02 [INFO] 53                                                                                                            
12:54:02 [INFO] 54                                                                                                            
12:54:02 [INFO] 55                                                                                                            
12:54:02 [INFO] 56                                                                                                            
12:54:02 [INFO] 57                                                                                                  51        
12:54:02 [INFO] 58                                                                                                  51        
12:54:02 [INFO] 59                                                                                                  51        
12:54:02 [INFO] 60                                                                                                            
12:54:02 [INFO] 61                                                                    78                                      
12:54:02 [INFO] 62                                                                                                            
12:54:02 [INFO] 63                                                                                                            
12:54:02 [INFO] 64                                                                                                            
12:54:02 [INFO] 65                                                                                                            
12:54:02 [INFO] 66                                                                                                            
12:54:02 [INFO] 67                                                                                                            
12:54:02 [INFO] 68                                                                                                            
12:54:02 [INFO] 69                                                                    44        80                            
12:54:02 [INFO] 70                                                                    44        81                            
12:54:02 [INFO] 71                                                                                        61        51        
12:54:02 [INFO] 72                                                                                                            
12:54:02 [INFO] 73                                                                                                            
12:54:02 [INFO] 74                                                                                                            
12:54:02 [INFO] 75                                                                                                  51        
12:54:02 [INFO] 76                                                                                                            
12:54:02 [INFO] 77                                                                                                            
12:54:02 [INFO] 78                                                                                                  51        
12:54:02 [INFO] 79                                                84        21                                                
12:54:02 [INFO] 80                                                                                                            
12:54:02 [INFO] 81                                                                                                            
12:54:02 [INFO] 82                                                                                                            
12:54:02 [INFO] 83                                                85        21                                                
12:54:02 [INFO] 84                                                28        21                                                
12:54:02 [INFO] 85                                                28        21                                                
12:54:02 [INFO] 86                                                                                                            
12:54:02 [INFO] 87                                                                                                            
12:54:02 [INFO] 88                                                                                                            
12:54:02 [INFO] 89                                                90        21                                                
12:54:02 [INFO] 90                                                28        21                                                
12:54:02 [INFO] 91                                                                                                            
12:54:02 [INFO] init buffer: ["int", "id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] -----step 1-----
12:54:02 [INFO] state_stack: [0]
12:54:02 [INFO] symbol_stack: ["#"]
12:54:02 [INFO] buffer: ["int", "id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 0, token: int, action: "s4"
12:54:02 [INFO] 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
12:54:02 [INFO] -----step 2-----
12:54:02 [INFO] state_stack: [0, 4]
12:54:02 [INFO] symbol_stack: ["#", "int"]
12:54:02 [INFO] buffer: ["id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 4, token: id, action: "r16"
12:54:02 [INFO] 规约: 按照第16个产生式 变量类型 -> int  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0]
12:54:02 [INFO] symbol_stack: ["#"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 0 时,接收到 变量类型 应当跳转到 3 状态。
12:54:02 [INFO] 将 3 状态压入状态栈，将 变量类型 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3]
12:54:02 [INFO] symbol_stack: ["#", "变量类型"]
12:54:02 [INFO] -----step 3-----
12:54:02 [INFO] state_stack: [0, 3]
12:54:02 [INFO] symbol_stack: ["#", "变量类型"]
12:54:02 [INFO] buffer: ["id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 3, token: id, action: "s10"
12:54:02 [INFO] 移进: 将 s10 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 4-----
12:54:02 [INFO] state_stack: [0, 3, 10]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id"]
12:54:02 [INFO] buffer: ["(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 10, token: (, action: "s11"
12:54:02 [INFO] 移进: 将 s11 状态压入状态栈，将 ( 符号压入符号栈
12:54:02 [INFO] -----step 5-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "("]
12:54:02 [INFO] buffer: ["int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 11, token: int, action: "s4"
12:54:02 [INFO] 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
12:54:02 [INFO] -----step 6-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 4]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "int"]
12:54:02 [INFO] buffer: ["id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 4, token: id, action: "r16"
12:54:02 [INFO] 规约: 按照第16个产生式 变量类型 -> int  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "("]
12:54:02 [INFO] 查询GOTO表: 当前状态为 11 时,接收到 变量类型 应当跳转到 13 状态。
12:54:02 [INFO] 将 13 状态压入状态栈，将 变量类型 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型"]
12:54:02 [INFO] -----step 7-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型"]
12:54:02 [INFO] buffer: ["id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 13, token: id, action: "s16"
12:54:02 [INFO] 移进: 将 s16 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 8-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id"]
12:54:02 [INFO] buffer: [",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 16, token: ,, action: "s19"
12:54:02 [INFO] 移进: 将 s19 状态压入状态栈，将 , 符号压入符号栈
12:54:02 [INFO] -----step 9-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ","]
12:54:02 [INFO] buffer: ["int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 19, token: int, action: "s4"
12:54:02 [INFO] 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
12:54:02 [INFO] -----step 10-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19, 4]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "int"]
12:54:02 [INFO] buffer: ["id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 4, token: id, action: "r16"
12:54:02 [INFO] 规约: 按照第16个产生式 变量类型 -> int  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ","]
12:54:02 [INFO] 查询GOTO表: 当前状态为 19 时,接收到 变量类型 应当跳转到 13 状态。
12:54:02 [INFO] 将 13 状态压入状态栈，将 变量类型 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19, 13]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "变量类型"]
12:54:02 [INFO] -----step 11-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19, 13]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "变量类型"]
12:54:02 [INFO] buffer: ["id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 13, token: id, action: "s16"
12:54:02 [INFO] 移进: 将 s16 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 12-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19, 13, 16]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "变量类型", "id"]
12:54:02 [INFO] buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 16, token: ), action: "r5"
12:54:02 [INFO] 规约: 按照第5个产生式 形式参数 -> 变量类型 id  进行规约
12:54:02 [INFO] 弹出2个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ","]
12:54:02 [INFO] 查询GOTO表: 当前状态为 19 时,接收到 形式参数 应当跳转到 27 状态。
12:54:02 [INFO] 将 27 状态压入状态栈，将 形式参数 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19, 27]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "形式参数"]
12:54:02 [INFO] -----step 13-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 13, 16, 19, 27]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "形式参数"]
12:54:02 [INFO] buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 27, token: ), action: "r6"
12:54:02 [INFO] 规约: 按照第6个产生式 形式参数 -> 变量类型 id , 形式参数  进行规约
12:54:02 [INFO] 弹出4个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "("]
12:54:02 [INFO] 查询GOTO表: 当前状态为 11 时,接收到 形式参数 应当跳转到 12 状态。
12:54:02 [INFO] 将 12 状态压入状态栈，将 形式参数 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数"]
12:54:02 [INFO] -----step 14-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数"]
12:54:02 [INFO] buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 12, token: ), action: "s15"
12:54:02 [INFO] 移进: 将 s15 状态压入状态栈，将 ) 符号压入符号栈
12:54:02 [INFO] -----step 15-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")"]
12:54:02 [INFO] buffer: ["{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 15, token: {, action: "s18"
12:54:02 [INFO] 移进: 将 s18 状态压入状态栈，将 { 符号压入符号栈
12:54:02 [INFO] -----step 16-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{"]
12:54:02 [INFO] buffer: ["int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 18, token: int, action: "s4"
12:54:02 [INFO] 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
12:54:02 [INFO] -----step 17-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 4]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "int"]
12:54:02 [INFO] buffer: ["id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 4, token: id, action: "r16"
12:54:02 [INFO] 规约: 按照第16个产生式 变量类型 -> int  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 18 时,接收到 变量类型 应当跳转到 21 状态。
12:54:02 [INFO] 将 21 状态压入状态栈，将 变量类型 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 21]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型"]
12:54:02 [INFO] -----step 18-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 21]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型"]
12:54:02 [INFO] buffer: ["id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 21, token: id, action: "s30"
12:54:02 [INFO] 移进: 将 s30 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 19-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 21, 30]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型", "id"]
12:54:02 [INFO] buffer: [";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 30, token: ;, action: "s41"
12:54:02 [INFO] 移进: 将 s41 状态压入状态栈，将 ; 符号压入符号栈
12:54:02 [INFO] -----step 20-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 21, 30, 41]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型", "id", ";"]
12:54:02 [INFO] buffer: ["id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 41, token: id, action: "r8"
12:54:02 [INFO] 规约: 按照第8个产生式 代码块 -> 变量类型 id ;  进行规约
12:54:02 [INFO] 弹出3个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 18 时,接收到 代码块 应当跳转到 26 状态。
12:54:02 [INFO] 将 26 状态压入状态栈，将 代码块 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
12:54:02 [INFO] -----step 21-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
12:54:02 [INFO] buffer: ["id", "=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 26, token: id, action: "s22"
12:54:02 [INFO] 移进: 将 s22 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 22-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id"]
12:54:02 [INFO] buffer: ["=", "id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 22, token: =, action: "s31"
12:54:02 [INFO] 移进: 将 s31 状态压入状态栈，将 = 符号压入符号栈
12:54:02 [INFO] -----step 23-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "="]
12:54:02 [INFO] buffer: ["id", "+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 31, token: id, action: "s35"
12:54:02 [INFO] 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 24-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 35]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "id"]
12:54:02 [INFO] buffer: ["+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 35, token: +, action: "r24"
12:54:02 [INFO] 规约: 按照第24个产生式 算术表达式 -> id  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "="]
12:54:02 [INFO] 查询GOTO表: 当前状态为 31 时,接收到 算术表达式 应当跳转到 43 状态。
12:54:02 [INFO] 将 43 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
12:54:02 [INFO] -----step 25-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
12:54:02 [INFO] buffer: ["+", "id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 43, token: +, action: "s54"
12:54:02 [INFO] 移进: 将 s54 状态压入状态栈，将 + 符号压入符号栈
12:54:02 [INFO] -----step 26-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 54]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "+"]
12:54:02 [INFO] buffer: ["id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 54, token: id, action: "r39"
12:54:02 [INFO] 规约: 按照第39个产生式 算术运算符 -> +  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 43 时,接收到 算术运算符 应当跳转到 51 状态。
12:54:02 [INFO] 将 51 状态压入状态栈，将 算术运算符 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符"]
12:54:02 [INFO] -----step 27-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符"]
12:54:02 [INFO] buffer: ["id", ";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 51, token: id, action: "s35"
12:54:02 [INFO] 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 28-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51, 35]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符", "id"]
12:54:02 [INFO] buffer: [";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 35, token: ;, action: "r24"
12:54:02 [INFO] 规约: 按照第24个产生式 算术表达式 -> id  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 51 时,接收到 算术表达式 应当跳转到 75 状态。
12:54:02 [INFO] 将 75 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51, 75]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符", "算术表达式"]
12:54:02 [INFO] -----step 29-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51, 75]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符", "算术表达式"]
12:54:02 [INFO] buffer: [";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 75, token: ;, action: "r21"
12:54:02 [INFO] 规约: 按照第21个产生式 算术表达式 -> 算术表达式 算术运算符 算术表达式  进行规约
12:54:02 [INFO] 弹出3个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "="]
12:54:02 [INFO] 查询GOTO表: 当前状态为 31 时,接收到 算术表达式 应当跳转到 43 状态。
12:54:02 [INFO] 将 43 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
12:54:02 [INFO] -----step 30-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
12:54:02 [INFO] buffer: [";", "int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 43, token: ;, action: "s60"
12:54:02 [INFO] 移进: 将 s60 状态压入状态栈，将 ; 符号压入符号栈
12:54:02 [INFO] -----step 31-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 60]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", ";"]
12:54:02 [INFO] buffer: ["int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 60, token: int, action: "r10"
12:54:02 [INFO] 规约: 按照第10个产生式 代码块 -> id = 算术表达式 ;  进行规约
12:54:02 [INFO] 弹出4个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 26 时,接收到 代码块 应当跳转到 28 状态。
12:54:02 [INFO] 将 28 状态压入状态栈，将 代码块 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
12:54:02 [INFO] -----step 32-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
12:54:02 [INFO] buffer: ["int", "id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 28, token: int, action: "s4"
12:54:02 [INFO] 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
12:54:02 [INFO] -----step 33-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 4]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "int"]
12:54:02 [INFO] buffer: ["id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 4, token: id, action: "r16"
12:54:02 [INFO] 规约: 按照第16个产生式 变量类型 -> int  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 28 时,接收到 变量类型 应当跳转到 21 状态。
12:54:02 [INFO] 将 21 状态压入状态栈，将 变量类型 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型"]
12:54:02 [INFO] -----step 34-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型"]
12:54:02 [INFO] buffer: ["id", "=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 21, token: id, action: "s30"
12:54:02 [INFO] 移进: 将 s30 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 35-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id"]
12:54:02 [INFO] buffer: ["=", "value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 30, token: =, action: "s42"
12:54:02 [INFO] 移进: 将 s42 状态压入状态栈，将 = 符号压入符号栈
12:54:02 [INFO] -----step 36-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "="]
12:54:02 [INFO] buffer: ["value", ";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 42, token: value, action: "s36"
12:54:02 [INFO] 移进: 将 s36 状态压入状态栈，将 value 符号压入符号栈
12:54:02 [INFO] -----step 37-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 36]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "value"]
12:54:02 [INFO] buffer: [";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 36, token: ;, action: "r25"
12:54:02 [INFO] 规约: 按照第25个产生式 算术表达式 -> value  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "="]
12:54:02 [INFO] 查询GOTO表: 当前状态为 42 时,接收到 算术表达式 应当跳转到 59 状态。
12:54:02 [INFO] 将 59 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 59]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "算术表达式"]
12:54:02 [INFO] -----step 38-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 59]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "算术表达式"]
12:54:02 [INFO] buffer: [";", "int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 59, token: ;, action: "s77"
12:54:02 [INFO] 移进: 将 s77 状态压入状态栈，将 ; 符号压入符号栈
12:54:02 [INFO] -----step 39-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 59, 77]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "算术表达式", ";"]
12:54:02 [INFO] buffer: ["int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 77, token: int, action: "r9"
12:54:02 [INFO] 规约: 按照第9个产生式 代码块 -> 变量类型 id = 算术表达式 ;  进行规约
12:54:02 [INFO] 弹出5个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 28 时,接收到 代码块 应当跳转到 28 状态。
12:54:02 [INFO] 将 28 状态压入状态栈，将 代码块 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
12:54:02 [INFO] -----step 40-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
12:54:02 [INFO] buffer: ["int", "id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 28, token: int, action: "s4"
12:54:02 [INFO] 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
12:54:02 [INFO] -----step 41-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 4]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "int"]
12:54:02 [INFO] buffer: ["id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 4, token: id, action: "r16"
12:54:02 [INFO] 规约: 按照第16个产生式 变量类型 -> int  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 28 时,接收到 变量类型 应当跳转到 21 状态。
12:54:02 [INFO] 将 21 状态压入状态栈，将 变量类型 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型"]
12:54:02 [INFO] -----step 42-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型"]
12:54:02 [INFO] buffer: ["id", "=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 21, token: id, action: "s30"
12:54:02 [INFO] 移进: 将 s30 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 43-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21, 30]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型", "id"]
12:54:02 [INFO] buffer: ["=", "id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 30, token: =, action: "s42"
12:54:02 [INFO] 移进: 将 s42 状态压入状态栈，将 = 符号压入符号栈
12:54:02 [INFO] -----step 44-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21, 30, 42]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型", "id", "="]
12:54:02 [INFO] buffer: ["id", ";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 42, token: id, action: "s35"
12:54:02 [INFO] 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 45-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21, 30, 42, 35]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型", "id", "=", "id"]
12:54:02 [INFO] buffer: [";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 35, token: ;, action: "r24"
12:54:02 [INFO] 规约: 按照第24个产生式 算术表达式 -> id  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21, 30, 42]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型", "id", "="]
12:54:02 [INFO] 查询GOTO表: 当前状态为 42 时,接收到 算术表达式 应当跳转到 59 状态。
12:54:02 [INFO] 将 59 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21, 30, 42, 59]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型", "id", "=", "算术表达式"]
12:54:02 [INFO] -----step 46-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21, 30, 42, 59]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型", "id", "=", "算术表达式"]
12:54:02 [INFO] buffer: [";", "if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 59, token: ;, action: "s77"
12:54:02 [INFO] 移进: 将 s77 状态压入状态栈，将 ; 符号压入符号栈
12:54:02 [INFO] -----step 47-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 21, 30, 42, 59, 77]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "变量类型", "id", "=", "算术表达式", ";"]
12:54:02 [INFO] buffer: ["if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 77, token: if, action: "r9"
12:54:02 [INFO] 规约: 按照第9个产生式 代码块 -> 变量类型 id = 算术表达式 ;  进行规约
12:54:02 [INFO] 弹出5个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 28 时,接收到 代码块 应当跳转到 28 状态。
12:54:02 [INFO] 将 28 状态压入状态栈，将 代码块 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块"]
12:54:02 [INFO] -----step 48-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块"]
12:54:02 [INFO] buffer: ["if", "(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 28, token: if, action: "s24"
12:54:02 [INFO] 移进: 将 s24 状态压入状态栈，将 if 符号压入符号栈
12:54:02 [INFO] -----step 49-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if"]
12:54:02 [INFO] buffer: ["(", "id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 24, token: (, action: "s33"
12:54:02 [INFO] 移进: 将 s33 状态压入状态栈，将 ( 符号压入符号栈
12:54:02 [INFO] -----step 50-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "("]
12:54:02 [INFO] buffer: ["id", "<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 33, token: id, action: "s35"
12:54:02 [INFO] 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 51-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 35]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "id"]
12:54:02 [INFO] buffer: ["<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 35, token: <, action: "r24"
12:54:02 [INFO] 规约: 按照第24个产生式 算术表达式 -> id  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "("]
12:54:02 [INFO] 查询GOTO表: 当前状态为 33 时,接收到 算术表达式 应当跳转到 44 状态。
12:54:02 [INFO] 将 44 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式"]
12:54:02 [INFO] -----step 52-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式"]
12:54:02 [INFO] buffer: ["<", "value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 44, token: <, action: "s62"
12:54:02 [INFO] 移进: 将 s62 状态压入状态栈，将 < 符号压入符号栈
12:54:02 [INFO] -----step 53-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44, 62]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式", "<"]
12:54:02 [INFO] buffer: ["value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 62, token: value, action: "r33"
12:54:02 [INFO] 规约: 按照第33个产生式 比较运算符 -> <  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 44 时,接收到 比较运算符 应当跳转到 61 状态。
12:54:02 [INFO] 将 61 状态压入状态栈，将 比较运算符 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44, 61]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式", "比较运算符"]
12:54:02 [INFO] -----step 54-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44, 61]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式", "比较运算符"]
12:54:02 [INFO] buffer: ["value", ")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 61, token: value, action: "s36"
12:54:02 [INFO] 移进: 将 s36 状态压入状态栈，将 value 符号压入符号栈
12:54:02 [INFO] -----step 55-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44, 61, 36]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式", "比较运算符", "value"]
12:54:02 [INFO] buffer: [")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 36, token: ), action: "r25"
12:54:02 [INFO] 规约: 按照第25个产生式 算术表达式 -> value  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44, 61]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式", "比较运算符"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 61 时,接收到 算术表达式 应当跳转到 78 状态。
12:54:02 [INFO] 将 78 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44, 61, 78]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式", "比较运算符", "算术表达式"]
12:54:02 [INFO] -----step 56-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 44, 61, 78]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "算术表达式", "比较运算符", "算术表达式"]
12:54:02 [INFO] buffer: [")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 78, token: ), action: "r26"
12:54:02 [INFO] 规约: 按照第26个产生式 布尔表达式 -> 算术表达式 比较运算符 算术表达式  进行规约
12:54:02 [INFO] 弹出3个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "("]
12:54:02 [INFO] 查询GOTO表: 当前状态为 33 时,接收到 布尔表达式 应当跳转到 50 状态。
12:54:02 [INFO] 将 50 状态压入状态栈，将 布尔表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式"]
12:54:02 [INFO] -----step 57-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式"]
12:54:02 [INFO] buffer: [")", "{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 50, token: ), action: "s74"
12:54:02 [INFO] 移进: 将 s74 状态压入状态栈，将 ) 符号压入符号栈
12:54:02 [INFO] -----step 58-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")"]
12:54:02 [INFO] buffer: ["{", "id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 74, token: {, action: "s83"
12:54:02 [INFO] 移进: 将 s83 状态压入状态栈，将 { 符号压入符号栈
12:54:02 [INFO] -----step 59-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{"]
12:54:02 [INFO] buffer: ["id", "=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 83, token: id, action: "s22"
12:54:02 [INFO] 移进: 将 s22 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 60-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id"]
12:54:02 [INFO] buffer: ["=", "-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 22, token: =, action: "s31"
12:54:02 [INFO] 移进: 将 s31 状态压入状态栈，将 = 符号压入符号栈
12:54:02 [INFO] -----step 61-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "="]
12:54:02 [INFO] buffer: ["-", "id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 31, token: -, action: "s39"
12:54:02 [INFO] 移进: 将 s39 状态压入状态栈，将 - 符号压入符号栈
12:54:02 [INFO] -----step 62-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31, 39]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "=", "-"]
12:54:02 [INFO] buffer: ["id", ";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 39, token: id, action: "s35"
12:54:02 [INFO] 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 63-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31, 39, 35]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "=", "-", "id"]
12:54:02 [INFO] buffer: [";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 35, token: ;, action: "r24"
12:54:02 [INFO] 规约: 按照第24个产生式 算术表达式 -> id  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31, 39]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "=", "-"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 39 时,接收到 算术表达式 应当跳转到 58 状态。
12:54:02 [INFO] 将 58 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31, 39, 58]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "=", "-", "算术表达式"]
12:54:02 [INFO] -----step 64-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31, 39, 58]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "=", "-", "算术表达式"]
12:54:02 [INFO] buffer: [";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 58, token: ;, action: "r22"
12:54:02 [INFO] 规约: 按照第22个产生式 算术表达式 -> - 算术表达式  进行规约
12:54:02 [INFO] 弹出2个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "="]
12:54:02 [INFO] 查询GOTO表: 当前状态为 31 时,接收到 算术表达式 应当跳转到 43 状态。
12:54:02 [INFO] 将 43 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式"]
12:54:02 [INFO] -----step 65-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式"]
12:54:02 [INFO] buffer: [";", "}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 43, token: ;, action: "s60"
12:54:02 [INFO] 移进: 将 s60 状态压入状态栈，将 ; 符号压入符号栈
12:54:02 [INFO] -----step 66-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 22, 31, 43, 60]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", ";"]
12:54:02 [INFO] buffer: ["}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 60, token: }, action: "r10"
12:54:02 [INFO] 规约: 按照第10个产生式 代码块 -> id = 算术表达式 ;  进行规约
12:54:02 [INFO] 弹出4个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 83 时,接收到 代码块 应当跳转到 85 状态。
12:54:02 [INFO] 将 85 状态压入状态栈，将 代码块 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块"]
12:54:02 [INFO] -----step 67-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块"]
12:54:02 [INFO] buffer: ["}", "else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 85, token: }, action: "s87"
12:54:02 [INFO] 移进: 将 s87 状态压入状态栈，将 } 符号压入符号栈
12:54:02 [INFO] -----step 68-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}"]
12:54:02 [INFO] buffer: ["else", "{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 87, token: else, action: "s88"
12:54:02 [INFO] 移进: 将 s88 状态压入状态栈，将 else 符号压入符号栈
12:54:02 [INFO] -----step 69-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else"]
12:54:02 [INFO] buffer: ["{", "while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 88, token: {, action: "s89"
12:54:02 [INFO] 移进: 将 s89 状态压入状态栈，将 { 符号压入符号栈
12:54:02 [INFO] -----step 70-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{"]
12:54:02 [INFO] buffer: ["while", "(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 89, token: while, action: "s23"
12:54:02 [INFO] 移进: 将 s23 状态压入状态栈，将 while 符号压入符号栈
12:54:02 [INFO] -----step 71-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while"]
12:54:02 [INFO] buffer: ["(", "id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 23, token: (, action: "s32"
12:54:02 [INFO] 移进: 将 s32 状态压入状态栈，将 ( 符号压入符号栈
12:54:02 [INFO] -----step 72-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "("]
12:54:02 [INFO] buffer: ["id", ">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 32, token: id, action: "s35"
12:54:02 [INFO] 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 73-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 35]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "id"]
12:54:02 [INFO] buffer: [">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 35, token: >, action: "r24"
12:54:02 [INFO] 规约: 按照第24个产生式 算术表达式 -> id  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "("]
12:54:02 [INFO] 查询GOTO表: 当前状态为 32 时,接收到 算术表达式 应当跳转到 44 状态。
12:54:02 [INFO] 将 44 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式"]
12:54:02 [INFO] -----step 74-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式"]
12:54:02 [INFO] buffer: [">", "value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 44, token: >, action: "s63"
12:54:02 [INFO] 移进: 将 s63 状态压入状态栈，将 > 符号压入符号栈
12:54:02 [INFO] -----step 75-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44, 63]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式", ">"]
12:54:02 [INFO] buffer: ["value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 63, token: value, action: "r34"
12:54:02 [INFO] 规约: 按照第34个产生式 比较运算符 -> >  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 44 时,接收到 比较运算符 应当跳转到 61 状态。
12:54:02 [INFO] 将 61 状态压入状态栈，将 比较运算符 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44, 61]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式", "比较运算符"]
12:54:02 [INFO] -----step 76-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44, 61]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式", "比较运算符"]
12:54:02 [INFO] buffer: ["value", ")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 61, token: value, action: "s36"
12:54:02 [INFO] 移进: 将 s36 状态压入状态栈，将 value 符号压入符号栈
12:54:02 [INFO] -----step 77-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44, 61, 36]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式", "比较运算符", "value"]
12:54:02 [INFO] buffer: [")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 36, token: ), action: "r25"
12:54:02 [INFO] 规约: 按照第25个产生式 算术表达式 -> value  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44, 61]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式", "比较运算符"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 61 时,接收到 算术表达式 应当跳转到 78 状态。
12:54:02 [INFO] 将 78 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44, 61, 78]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式", "比较运算符", "算术表达式"]
12:54:02 [INFO] -----step 78-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 44, 61, 78]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "算术表达式", "比较运算符", "算术表达式"]
12:54:02 [INFO] buffer: [")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 78, token: ), action: "r26"
12:54:02 [INFO] 规约: 按照第26个产生式 布尔表达式 -> 算术表达式 比较运算符 算术表达式  进行规约
12:54:02 [INFO] 弹出3个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "("]
12:54:02 [INFO] 查询GOTO表: 当前状态为 32 时,接收到 布尔表达式 应当跳转到 45 状态。
12:54:02 [INFO] 将 45 状态压入状态栈，将 布尔表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式"]
12:54:02 [INFO] -----step 79-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式"]
12:54:02 [INFO] buffer: [")", "{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 45, token: ), action: "s68"
12:54:02 [INFO] 移进: 将 s68 状态压入状态栈，将 ) 符号压入符号栈
12:54:02 [INFO] -----step 80-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")"]
12:54:02 [INFO] buffer: ["{", "id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 68, token: {, action: "s79"
12:54:02 [INFO] 移进: 将 s79 状态压入状态栈，将 { 符号压入符号栈
12:54:02 [INFO] -----step 81-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{"]
12:54:02 [INFO] buffer: ["id", "=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 79, token: id, action: "s22"
12:54:02 [INFO] 移进: 将 s22 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 82-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id"]
12:54:02 [INFO] buffer: ["=", "id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 22, token: =, action: "s31"
12:54:02 [INFO] 移进: 将 s31 状态压入状态栈，将 = 符号压入符号栈
12:54:02 [INFO] -----step 83-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "="]
12:54:02 [INFO] buffer: ["id", "-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 31, token: id, action: "s35"
12:54:02 [INFO] 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 84-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 35]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "id"]
12:54:02 [INFO] buffer: ["-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 35, token: -, action: "r24"
12:54:02 [INFO] 规约: 按照第24个产生式 算术表达式 -> id  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "="]
12:54:02 [INFO] 查询GOTO表: 当前状态为 31 时,接收到 算术表达式 应当跳转到 43 状态。
12:54:02 [INFO] 将 43 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式"]
12:54:02 [INFO] -----step 85-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式"]
12:54:02 [INFO] buffer: ["-", "value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 43, token: -, action: "s53"
12:54:02 [INFO] 移进: 将 s53 状态压入状态栈，将 - 符号压入符号栈
12:54:02 [INFO] -----step 86-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43, 53]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", "-"]
12:54:02 [INFO] buffer: ["value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 53, token: value, action: "r40"
12:54:02 [INFO] 规约: 按照第40个产生式 算术运算符 -> -  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 43 时,接收到 算术运算符 应当跳转到 51 状态。
12:54:02 [INFO] 将 51 状态压入状态栈，将 算术运算符 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43, 51]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", "算术运算符"]
12:54:02 [INFO] -----step 87-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43, 51]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", "算术运算符"]
12:54:02 [INFO] buffer: ["value", ";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 51, token: value, action: "s36"
12:54:02 [INFO] 移进: 将 s36 状态压入状态栈，将 value 符号压入符号栈
12:54:02 [INFO] -----step 88-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43, 51, 36]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", "算术运算符", "value"]
12:54:02 [INFO] buffer: [";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 36, token: ;, action: "r25"
12:54:02 [INFO] 规约: 按照第25个产生式 算术表达式 -> value  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43, 51]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", "算术运算符"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 51 时,接收到 算术表达式 应当跳转到 75 状态。
12:54:02 [INFO] 将 75 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43, 51, 75]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", "算术运算符", "算术表达式"]
12:54:02 [INFO] -----step 89-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43, 51, 75]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", "算术运算符", "算术表达式"]
12:54:02 [INFO] buffer: [";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 75, token: ;, action: "r21"
12:54:02 [INFO] 规约: 按照第21个产生式 算术表达式 -> 算术表达式 算术运算符 算术表达式  进行规约
12:54:02 [INFO] 弹出3个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "="]
12:54:02 [INFO] 查询GOTO表: 当前状态为 31 时,接收到 算术表达式 应当跳转到 43 状态。
12:54:02 [INFO] 将 43 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式"]
12:54:02 [INFO] -----step 90-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式"]
12:54:02 [INFO] buffer: [";", "}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 43, token: ;, action: "s60"
12:54:02 [INFO] 移进: 将 s60 状态压入状态栈，将 ; 符号压入符号栈
12:54:02 [INFO] -----step 91-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 22, 31, 43, 60]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "id", "=", "算术表达式", ";"]
12:54:02 [INFO] buffer: ["}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 60, token: }, action: "r10"
12:54:02 [INFO] 规约: 按照第10个产生式 代码块 -> id = 算术表达式 ;  进行规约
12:54:02 [INFO] 弹出4个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 79 时,接收到 代码块 应当跳转到 84 状态。
12:54:02 [INFO] 将 84 状态压入状态栈，将 代码块 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 84]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "代码块"]
12:54:02 [INFO] -----step 92-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 84]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "代码块"]
12:54:02 [INFO] buffer: ["}", "id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 84, token: }, action: "s86"
12:54:02 [INFO] 移进: 将 s86 状态压入状态栈，将 } 符号压入符号栈
12:54:02 [INFO] -----step 93-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 23, 32, 45, 68, 79, 84, 86]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "while", "(", "布尔表达式", ")", "{", "代码块", "}"]
12:54:02 [INFO] buffer: ["id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 86, token: id, action: "r11"
12:54:02 [INFO] 规约: 按照第11个产生式 代码块 -> while ( 布尔表达式 ) { 代码块 }  进行规约
12:54:02 [INFO] 弹出7个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{"]
12:54:02 [INFO] 查询GOTO表: 当前状态为 89 时,接收到 代码块 应当跳转到 90 状态。
12:54:02 [INFO] 将 90 状态压入状态栈，将 代码块 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块"]
12:54:02 [INFO] -----step 94-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块"]
12:54:02 [INFO] buffer: ["id", "=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 90, token: id, action: "s22"
12:54:02 [INFO] 移进: 将 s22 状态压入状态栈，将 id 符号压入符号栈
12:54:02 [INFO] -----step 95-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 22]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "id"]
12:54:02 [INFO] buffer: ["=", "value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 22, token: =, action: "s31"
12:54:02 [INFO] 移进: 将 s31 状态压入状态栈，将 = 符号压入符号栈
12:54:02 [INFO] -----step 96-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "id", "="]
12:54:02 [INFO] buffer: ["value", ";", "}", "}", "#"]
12:54:02 [INFO] state: 31, token: value, action: "s36"
12:54:02 [INFO] 移进: 将 s36 状态压入状态栈，将 value 符号压入符号栈
12:54:02 [INFO] -----step 97-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 22, 31, 36]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "id", "=", "value"]
12:54:02 [INFO] buffer: [";", "}", "}", "#"]
12:54:02 [INFO] state: 36, token: ;, action: "r25"
12:54:02 [INFO] 规约: 按照第25个产生式 算术表达式 -> value  进行规约
12:54:02 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 22, 31]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "id", "="]
12:54:02 [INFO] 查询GOTO表: 当前状态为 31 时,接收到 算术表达式 应当跳转到 43 状态。
12:54:02 [INFO] 将 43 状态压入状态栈，将 算术表达式 符号压入符号栈
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "id", "=", "算术表达式"]
12:54:02 [INFO] -----step 98-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 22, 31, 43]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "id", "=", "算术表达式"]
12:54:02 [INFO] buffer: [";", "}", "}", "#"]
12:54:02 [INFO] state: 43, token: ;, action: "s60"
12:54:02 [INFO] 移进: 将 s60 状态压入状态栈，将 ; 符号压入符号栈
12:54:02 [INFO] -----step 99-----
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 22, 31, 43, 60]
12:54:02 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "id", "=", "算术表达式", ";"]
12:54:02 [INFO] buffer: ["}", "}", "#"]
12:54:02 [INFO] state: 60, token: }, action: "r10"
12:54:02 [INFO] 规约: 按照第10个产生式 代码块 -> id = 算术表达式 ;  进行规约
12:54:02 [INFO] 弹出4个状态栈和符号栈中的元素
12:54:02 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 90 时,接收到 代码块 应当跳转到 28 状态。
12:54:03 [INFO] 将 28 状态压入状态栈，将 代码块 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "代码块"]
12:54:03 [INFO] -----step 100-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "代码块"]
12:54:03 [INFO] buffer: ["}", "}", "#"]
12:54:03 [INFO] state: 28, token: }, action: "r7"
12:54:03 [INFO] 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
12:54:03 [INFO] 弹出2个状态栈和符号栈中的元素
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 89 时,接收到 代码块 应当跳转到 90 状态。
12:54:03 [INFO] 将 90 状态压入状态栈，将 代码块 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块"]
12:54:03 [INFO] -----step 101-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块"]
12:54:03 [INFO] buffer: ["}", "}", "#"]
12:54:03 [INFO] state: 90, token: }, action: "s91"
12:54:03 [INFO] 移进: 将 s91 状态压入状态栈，将 } 符号压入符号栈
12:54:03 [INFO] -----step 102-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 24, 33, 50, 74, 83, 85, 87, 88, 89, 90, 91]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "}"]
12:54:03 [INFO] buffer: ["}", "#"]
12:54:03 [INFO] state: 91, token: }, action: "r13"
12:54:03 [INFO] 规约: 按照第13个产生式 代码块 -> if ( 布尔表达式 ) { 代码块 } else { 代码块 }  进行规约
12:54:03 [INFO] 弹出11个状态栈和符号栈中的元素
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 28 时,接收到 代码块 应当跳转到 28 状态。
12:54:03 [INFO] 将 28 状态压入状态栈，将 代码块 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "代码块"]
12:54:03 [INFO] -----step 103-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块", "代码块"]
12:54:03 [INFO] buffer: ["}", "#"]
12:54:03 [INFO] state: 28, token: }, action: "r7"
12:54:03 [INFO] 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
12:54:03 [INFO] 弹出2个状态栈和符号栈中的元素
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 28 时,接收到 代码块 应当跳转到 28 状态。
12:54:03 [INFO] 将 28 状态压入状态栈，将 代码块 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块"]
12:54:03 [INFO] -----step 104-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块", "代码块"]
12:54:03 [INFO] buffer: ["}", "#"]
12:54:03 [INFO] state: 28, token: }, action: "r7"
12:54:03 [INFO] 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
12:54:03 [INFO] 弹出2个状态栈和符号栈中的元素
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 28 时,接收到 代码块 应当跳转到 28 状态。
12:54:03 [INFO] 将 28 状态压入状态栈，将 代码块 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
12:54:03 [INFO] -----step 105-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
12:54:03 [INFO] buffer: ["}", "#"]
12:54:03 [INFO] state: 28, token: }, action: "r7"
12:54:03 [INFO] 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
12:54:03 [INFO] 弹出2个状态栈和符号栈中的元素
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 26 时,接收到 代码块 应当跳转到 28 状态。
12:54:03 [INFO] 将 28 状态压入状态栈，将 代码块 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
12:54:03 [INFO] -----step 106-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
12:54:03 [INFO] buffer: ["}", "#"]
12:54:03 [INFO] state: 28, token: }, action: "r7"
12:54:03 [INFO] 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
12:54:03 [INFO] 弹出2个状态栈和符号栈中的元素
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 18 时,接收到 代码块 应当跳转到 26 状态。
12:54:03 [INFO] 将 26 状态压入状态栈，将 代码块 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
12:54:03 [INFO] -----step 107-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
12:54:03 [INFO] buffer: ["}", "#"]
12:54:03 [INFO] state: 26, token: }, action: "s40"
12:54:03 [INFO] 移进: 将 s40 状态压入状态栈，将 } 符号压入符号栈
12:54:03 [INFO] -----step 108-----
12:54:03 [INFO] state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 40]
12:54:03 [INFO] symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "}"]
12:54:03 [INFO] buffer: ["#"]
12:54:03 [INFO] state: 40, token: #, action: "r4"
12:54:03 [INFO] 规约: 按照第4个产生式 函数定义 -> 变量类型 id ( 形式参数 ) { 代码块 }  进行规约
12:54:03 [INFO] 弹出8个状态栈和符号栈中的元素
12:54:03 [INFO] state_stack: [0]
12:54:03 [INFO] symbol_stack: ["#"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 0 时,接收到 函数定义 应当跳转到 2 状态。
12:54:03 [INFO] 将 2 状态压入状态栈，将 函数定义 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 2]
12:54:03 [INFO] symbol_stack: ["#", "函数定义"]
12:54:03 [INFO] -----step 109-----
12:54:03 [INFO] state_stack: [0, 2]
12:54:03 [INFO] symbol_stack: ["#", "函数定义"]
12:54:03 [INFO] buffer: ["#"]
12:54:03 [INFO] state: 2, token: #, action: "r1"
12:54:03 [INFO] 规约: 按照第1个产生式 程序 -> 函数定义  进行规约
12:54:03 [INFO] 弹出1个状态栈和符号栈中的元素
12:54:03 [INFO] state_stack: [0]
12:54:03 [INFO] symbol_stack: ["#"]
12:54:03 [INFO] 查询GOTO表: 当前状态为 0 时,接收到 程序 应当跳转到 1 状态。
12:54:03 [INFO] 将 1 状态压入状态栈，将 程序 符号压入符号栈
12:54:03 [INFO] state_stack: [0, 1]
12:54:03 [INFO] symbol_stack: ["#", "程序"]
12:54:03 [INFO] -----step 110-----
12:54:03 [INFO] state_stack: [0, 1]
12:54:03 [INFO] symbol_stack: ["#", "程序"]
12:54:03 [INFO] buffer: ["#"]
12:54:03 [INFO] state: 1, token: #, action: "acc"
12:54:03 [INFO] 接受
12:54:03 [INFO] slr1 success: true
