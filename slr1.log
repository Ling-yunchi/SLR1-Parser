02:38:08 [INFO] tokens: [Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "main" }, Token { token_type: Delimiter, token_value: "(" }, Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "a" }, Token { token_type: Delimiter, token_value: "," }, Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "b" }, Token { token_type: Delimiter, token_value: ")" }, Token { token_type: Delimiter, token_value: "{" }, Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "res" }, Token { token_type: Delimiter, token_value: ";" }, Token { token_type: Identifier, token_value: "res" }, Token { token_type: Operator, token_value: "=" }, Token { token_type: Identifier, token_value: "a" }, Token { token_type: Operator, token_value: "+" }, Token { token_type: Identifier, token_value: "b" }, Token { token_type: Delimiter, token_value: ";" }, Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "d" }, Token { token_type: Operator, token_value: "=" }, Token { token_type: Identifier, token_value: "a" }, Token { token_type: Delimiter, token_value: ";" }, Token { token_type: Delimiter, token_value: "}" }]
02:38:08 [INFO] grammar: Grammar { s: "程序", v: ["程序'", "程序", "函数定义", "形式参数", "代码块", "变量类型", "算术表达式", "布尔表达式", "比较运算符", "算术运算符"], t: ["id", "value", "(", ")", "{", "}", ",", ";", "=", "while", "if", "else", "return", "int", "float", "double", "bool", "char", "&&", "||", "!", "true", "false", "<", ">", "<=", ">=", "==", "!=", "-", "+", "*", "/"], p: [Product { left: "程序'", right: ["程序"] }, Product { left: "程序", right: ["函数定义"] }, Product { left: "函数定义", right: ["函数定义", "函数定义"] }, Product { left: "函数定义", right: ["变量类型", "id", "(", ")", "{", "代码块", "}"] }, Product { left: "函数定义", right: ["变量类型", "id", "(", "形式参数", ")", "{", "代码块", "}"] }, Product { left: "形式参数", right: ["变量类型", "id"] }, Product { left: "形式参数", right: ["变量类型", "id", ",", "形式参数"] }, Product { left: "代码块", right: ["代码块", "代码块"] }, Product { left: "代码块", right: ["变量类型", "id", ";"] }, Product { left: "代码块", right: ["变量类型", "id", "=", "算术表达式", ";"] }, Product { left: "代码块", right: ["id", "=", "算术表达式", ";"] }, Product { left: "代码块", right: ["while", "(", "布尔表达式", ")", "{", "代码块", "}"] }, Product { left: "代码块", right: ["if", "(", "布尔表达式", ")", "{", "代码块", "}"] }, Product { left: "代码块", right: ["if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "}"] }, Product { left: "代码块", right: ["return", ";"] }, Product { left: "代码块", right: ["return", "算术表达式", ";"] }, Product { left: "变量类型", right: ["int"] }, Product { left: "变量类型", right: ["float"] }, Product { left: "变量类型", right: ["double"] }, Product { left: "变量类型", right: ["bool"] }, Product { left: "变量类型", right: ["char"] }, Product { left: "算术表达式", right: ["算术表达式", "算术运算符", "算术表达式"] }, Product { left: "算术表达式", right: ["-", "算术表达式"] }, Product { left: "算术表达式", right: ["(", "算术表达式", ")"] }, Product { left: "算术表达式", right: ["id"] }, Product { left: "算术表达式", right: ["value"] }, Product { left: "布尔表达式", right: ["算术表达式", "比较运算符", "算术表达式"] }, Product { left: "布尔表达式", right: ["布尔表达式", "&&", "布尔表达式"] }, Product { left: "布尔表达式", right: ["布尔表达式", "||", "布尔表达式"] }, Product { left: "布尔表达式", right: ["!", "布尔表达式"] }, Product { left: "布尔表达式", right: ["(", "布尔表达式", ")"] }, Product { left: "布尔表达式", right: ["true"] }, Product { left: "布尔表达式", right: ["false"] }, Product { left: "比较运算符", right: ["<"] }, Product { left: "比较运算符", right: [">"] }, Product { left: "比较运算符", right: ["<="] }, Product { left: "比较运算符", right: [">="] }, Product { left: "比较运算符", right: ["=="] }, Product { left: "比较运算符", right: ["!="] }, Product { left: "算术运算符", right: ["+"] }, Product { left: "算术运算符", right: ["-"] }, Product { left: "算术运算符", right: ["*"] }, Product { left: "算术运算符", right: ["/"] }] }
02:38:08 [INFO] first: {">=": [">="], ">": [">"], "==": ["=="], "=": ["="], "-": ["-"], "形式参数": ["bool", "char", "double", "float", "int"], "算术运算符": ["*", "+", "-", "/"], "else": ["else"], "!=": ["!="], "程序": [], "id": ["id"], "代码块": ["bool", "char", "double", "float", "id", "if", "int", "return", "while"], "变量类型": ["bool", "char", "double", "float", "int"], "double": ["double"], ")": [")"], "}": ["}"], "<": ["<"], "char": ["char"], "true": ["true"], ";": [";"], "!": ["!"], "false": ["false"], "+": ["+"], "<=": ["<="], "int": ["int"], ",": [","], "if": ["if"], "float": ["float"], "{": ["{"], "*": ["*"], "bool": ["bool"], "/": ["/"], "程序'": [], "算术表达式": ["(", "-", "id", "value"], "布尔表达式": ["!", "(", "-", "false", "id", "true", "value"], "while": ["while"], "(": ["("], "函数定义": ["bool", "char", "double", "float", "int"], "||": ["||"], "&&": ["&&"], "比较运算符": ["!=", "<", "<=", "==", ">", ">="], "return": ["return"], "value": ["value"]}
02:38:08 [INFO] follow: {"程序'": [], "算术运算符": ["(", "-", "id", "value"], "函数定义": ["#", "bool", "char", "double", "float", "int"], "代码块": ["bool", "char", "double", "float", "id", "if", "int", "return", "while", "}"], "算术表达式": ["!=", ")", "*", "+", "-", "/", ";", "<", "<=", "==", ">", ">="], "布尔表达式": ["&&", ")", "||"], "形式参数": [")"], "程序": ["#"], "变量类型": ["id"], "比较运算符": ["(", "-", "id", "value"]}
02:38:09 [INFO] action: [{"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "s4", "id": "", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "acc", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "r1", "return": "", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "s4", "id": "", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s10", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r16", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r17", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r18", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r19", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r20", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "r2", "return": "", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "s4", "id": "", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "s11", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "s14", "#": "", "return": "", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "s4", "id": "", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "s15", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s16", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "s17", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "s18", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "r5", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "s19", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "s4", "id": "", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "s29", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s30", "double": "", "else": "", "<": "", ">": ""}, {"=": "s31", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "s32", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "s33", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "s38", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s37", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "s40", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "r6", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "r7", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r3", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "r3", "return": "", "true": "", "value": "", "char": "r3", "-": "", "float": "r3", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "r3", "id": "", "double": "r3", "else": "", "<": "", ">": ""}, {"=": "s42", ";": "s41", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s37", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "s49", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "s48", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s46", ">=": "", "if": "", "!=": "", "&&": "", "!": "s47", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "s49", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "s48", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s46", ">=": "", "if": "", "!=": "", "&&": "", "!": "s47", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "s52", "==": "", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "", "*": "s55", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "r24", "==": "r24", "bool": "", "+": "r24", "false": "", "/": "r24", "||": "", "*": "r24", "<=": "r24", ")": "r24", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "r24", "float": "", "{": "", "(": "", ">=": "r24", "if": "", "!=": "r24", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "r24", ">": "r24"}, {"=": "", ";": "r25", "==": "r25", "bool": "", "+": "r25", "false": "", "/": "r25", "||": "", "*": "r25", "<=": "r25", ")": "r25", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "r25", "float": "", "{": "", "(": "", ">=": "r25", "if": "", "!=": "r25", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "r25", ">": "r25"}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s37", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r14", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "r14", "true": "", "value": "", "char": "r14", "-": "", "float": "r14", "{": "", "(": "", ">=": "", "if": "r14", "!=": "", "&&": "", "!": "", "while": "r14", ",": "", "}": "r14", "int": "r14", "id": "r14", "double": "r14", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s37", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r4", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "r4", "return": "", "true": "", "value": "", "char": "r4", "-": "", "float": "r4", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "r4", "id": "", "double": "r4", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r8", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "r8", "true": "", "value": "", "char": "r8", "-": "", "float": "r8", "{": "", "(": "", ">=": "", "if": "r8", "!=": "", "&&": "", "!": "", "while": "r8", ",": "", "}": "r8", "int": "r8", "id": "r8", "double": "r8", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s37", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "s60", "==": "", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "", "*": "s55", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "s66", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "", "*": "s55", "<=": "s64", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "s65", "if": "", "!=": "s67", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "s62", ">": "s63"}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "s70", "*": "", "<=": "", ")": "s68", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "s69", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "s49", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "s48", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s46", ">=": "", "if": "", "!=": "", "&&": "", "!": "s47", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "s49", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "s48", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s46", ">=": "", "if": "", "!=": "", "&&": "", "!": "s47", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "r31", "*": "", "<=": "", ")": "r31", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "r31", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "r32", "*": "", "<=": "", ")": "r32", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "r32", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "s70", "*": "", "<=": "", ")": "s74", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "s69", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s37", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r15", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "r15", "true": "", "value": "", "char": "r15", "-": "", "float": "r15", "{": "", "(": "", ">=": "", "if": "r15", "!=": "", "&&": "", "!": "", "while": "r15", ",": "", "}": "r15", "int": "r15", "id": "r15", "double": "r15", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r40", "char": "", "-": "r40", "float": "", "{": "", "(": "r40", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r40", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r39", "char": "", "-": "r39", "float": "", "{": "", "(": "r39", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r39", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r41", "char": "", "-": "r41", "float": "", "{": "", "(": "r41", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r41", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r42", "char": "", "-": "r42", "float": "", "{": "", "(": "r42", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r42", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "", "*": "s55", "<=": "", ")": "s76", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "r22", "==": "r22", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "", "*": "s55", "<=": "r22", ")": "r22", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "r22", "if": "", "!=": "r22", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "r22", ">": "r22"}, {"=": "", ";": "s77", "==": "", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "", "*": "s55", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r10", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "r10", "true": "", "value": "", "char": "r10", "-": "", "float": "r10", "{": "", "(": "", ">=": "", "if": "r10", "!=": "", "&&": "", "!": "", "while": "r10", ",": "", "}": "r10", "int": "r10", "id": "r10", "double": "r10", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s37", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r33", "char": "", "-": "r33", "float": "", "{": "", "(": "r33", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r33", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r34", "char": "", "-": "r34", "float": "", "{": "", "(": "r34", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r34", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r35", "char": "", "-": "r35", "float": "", "{": "", "(": "r35", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r36", "char": "", "-": "r36", "float": "", "{": "", "(": "r36", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r36", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r37", "char": "", "-": "r37", "float": "", "{": "", "(": "r37", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r37", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "r38", "char": "", "-": "r38", "float": "", "{": "", "(": "r38", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "r38", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "s79", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "s49", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "s48", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s46", ">=": "", "if": "", "!=": "", "&&": "", "!": "s47", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "s49", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "s48", "value": "s36", "char": "", "-": "s39", "float": "", "{": "", "(": "s46", ">=": "", "if": "", "!=": "", "&&": "", "!": "s47", "while": "", ",": "", "}": "", "int": "", "id": "s35", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "s66", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "", "*": "s55", "<=": "s64", ")": "s76", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "s65", "if": "", "!=": "s67", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "s62", ">": "s63"}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "s70", "*": "", "<=": "", ")": "s82", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "s69", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "s70", "*": "", "<=": "", ")": "r29", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "s69", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "s83", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "r21", "==": "r21", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "", "*": "s55", "<=": "r21", ")": "r21", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "r21", "if": "", "!=": "r21", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "r21", ">": "r21"}, {"=": "", ";": "r23", "==": "r23", "bool": "", "+": "r23", "false": "", "/": "r23", "||": "", "*": "r23", "<=": "r23", ")": "r23", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "r23", "float": "", "{": "", "(": "", ">=": "r23", "if": "", "!=": "r23", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "r23", ">": "r23"}, {"=": "", ";": "", "==": "", "bool": "r9", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "r9", "true": "", "value": "", "char": "r9", "-": "", "float": "r9", "{": "", "(": "", ">=": "", "if": "r9", "!=": "", "&&": "", "!": "", "while": "r9", ",": "", "}": "r9", "int": "r9", "id": "r9", "double": "r9", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "s54", "false": "", "/": "s56", "||": "r26", "*": "s55", "<=": "", ")": "r26", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "s53", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "r26", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "s70", "*": "", "<=": "", ")": "r27", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "s69", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "s70", "*": "", "<=": "", ")": "r28", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "s69", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "r30", "*": "", "<=": "", ")": "r30", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "", "(": "", ">=": "", "if": "", "!=": "", "&&": "r30", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "s86", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "s87", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r11", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "r11", "true": "", "value": "", "char": "r11", "-": "", "float": "r11", "{": "", "(": "", ">=": "", "if": "r11", "!=": "", "&&": "", "!": "", "while": "r11", ",": "", "}": "r11", "int": "r11", "id": "r11", "double": "r11", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r12", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "r12", "true": "", "value": "", "char": "r12", "-": "", "float": "r12", "{": "", "(": "", ">=": "", "if": "r12", "!=": "", "&&": "", "!": "", "while": "r12", ",": "", "}": "r12", "int": "r12", "id": "r12", "double": "r12", "else": "s88", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "", "true": "", "value": "", "char": "", "-": "", "float": "", "{": "s89", "(": "", ">=": "", "if": "", "!=": "", "&&": "", "!": "", "while": "", ",": "", "}": "", "int": "", "id": "", "double": "", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "s7", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "s25", "true": "", "value": "", "char": "s8", "-": "", "float": "s5", "{": "", "(": "", ">=": "", "if": "s24", "!=": "", "&&": "", "!": "", "while": "s23", ",": "", "}": "s91", "int": "s4", "id": "s22", "double": "s6", "else": "", "<": "", ">": ""}, {"=": "", ";": "", "==": "", "bool": "r13", "+": "", "false": "", "/": "", "||": "", "*": "", "<=": "", ")": "", "#": "", "return": "r13", "true": "", "value": "", "char": "r13", "-": "", "float": "r13", "{": "", "(": "", ">=": "", "if": "r13", "!=": "", "&&": "", "!": "", "while": "r13", ",": "", "}": "r13", "int": "r13", "id": "r13", "double": "r13", "else": "", "<": "", ">": ""}]
02:38:09 [INFO] goto: [{"形式参数": "", "布尔表达式": "", "程序": "1", "函数定义": "2", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "3"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "9", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "3"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "9", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "3"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "12", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "13"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "20", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "26", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "27", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "13"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "28", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "34", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "28", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "28", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "43", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "45", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "44", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "50", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "44", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "57", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "58", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "59", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "61", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "72", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "71", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "73", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "44", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "75", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "78", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "80", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "44", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "81", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "44", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "61", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "51", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "84", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "85", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "28", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "28", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "90", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "28", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": "21"}, {"形式参数": "", "布尔表达式": "", "程序": "", "函数定义": "", "代码块": "", "比较运算符": "", "程序'": "", "算术表达式": "", "算术运算符": "", "变量类型": ""}]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: init buffer: ["int", "id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 1: 
state_stack: [0]
symbol_stack: ["#"]
buffer: ["int", "id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 0, token: int, action: "s4"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 2: 
state_stack: [0, 4]
symbol_stack: ["#", "int"]
buffer: ["id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 3: 
state_stack: [0, 3]
symbol_stack: ["#", "变量类型"]
buffer: ["id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 3, token: id, action: "s10"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s10 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 4: 
state_stack: [0, 3, 10]
symbol_stack: ["#", "变量类型", "id"]
buffer: ["(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 10, token: (, action: "s11"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s11 状态压入状态栈，将 ( 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 5: 
state_stack: [0, 3, 10, 11]
symbol_stack: ["#", "变量类型", "id", "("]
buffer: ["int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 11, token: int, action: "s4"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 6: 
state_stack: [0, 3, 10, 11, 4]
symbol_stack: ["#", "变量类型", "id", "(", "int"]
buffer: ["id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 7: 
state_stack: [0, 3, 10, 11, 13]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型"]
buffer: ["id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 13, token: id, action: "s16"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s16 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 8: 
state_stack: [0, 3, 10, 11, 13, 16]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id"]
buffer: [",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 16, token: ,, action: "s19"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s19 状态压入状态栈，将 , 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 9: 
state_stack: [0, 3, 10, 11, 13, 16, 19]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ","]
buffer: ["int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 19, token: int, action: "s4"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 10: 
state_stack: [0, 3, 10, 11, 13, 16, 19, 4]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "int"]
buffer: ["id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 11: 
state_stack: [0, 3, 10, 11, 13, 16, 19, 13]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "变量类型"]
buffer: ["id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 13, token: id, action: "s16"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s16 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 12: 
state_stack: [0, 3, 10, 11, 13, 16, 19, 13, 16]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "变量类型", "id"]
buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 16, token: ), action: "r5"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第5个产生式 形式参数 -> 变量类型 id  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 13: 
state_stack: [0, 3, 10, 11, 13, 16, 19, 27]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "形式参数"]
buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 27, token: ), action: "r6"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第6个产生式 形式参数 -> 变量类型 id , 形式参数  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 14: 
state_stack: [0, 3, 10, 11, 12]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数"]
buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 12, token: ), action: "s15"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s15 状态压入状态栈，将 ) 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 15: 
state_stack: [0, 3, 10, 11, 12, 15]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")"]
buffer: ["{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 15, token: {, action: "s18"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s18 状态压入状态栈，将 { 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 16: 
state_stack: [0, 3, 10, 11, 12, 15, 18]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{"]
buffer: ["int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 18, token: int, action: "s4"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 17: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 4]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "int"]
buffer: ["id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 18: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 21]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型"]
buffer: ["id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 21, token: id, action: "s30"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s30 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 19: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 21, 30]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型", "id"]
buffer: [";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 30, token: ;, action: "s41"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s41 状态压入状态栈，将 ; 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 20: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 21, 30, 41]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型", "id", ";"]
buffer: ["id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 41, token: id, action: "r8"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第8个产生式 代码块 -> 变量类型 id ;  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 21: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
buffer: ["id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 26, token: id, action: "s22"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s22 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 22: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id"]
buffer: ["=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 22, token: =, action: "s31"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s31 状态压入状态栈，将 = 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 23: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "="]
buffer: ["id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 31, token: id, action: "s35"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 24: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 35]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "id"]
buffer: ["+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 35, token: +, action: "r24"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第24个产生式 算术表达式 -> id  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 25: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
buffer: ["+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 43, token: +, action: "s54"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s54 状态压入状态栈，将 + 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 26: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 54]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "+"]
buffer: ["id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 54, token: id, action: "r39"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第39个产生式 算术运算符 -> +  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 27: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符"]
buffer: ["id", ";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 51, token: id, action: "s35"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 28: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51, 35]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符", "id"]
buffer: [";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 35, token: ;, action: "r24"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第24个产生式 算术表达式 -> id  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 29: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51, 75]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符", "算术表达式"]
buffer: [";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 75, token: ;, action: "r21"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第21个产生式 算术表达式 -> 算术表达式 算术运算符 算术表达式  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 30: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
buffer: [";", "int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 43, token: ;, action: "s60"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s60 状态压入状态栈，将 ; 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 31: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 60]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", ";"]
buffer: ["int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 60, token: int, action: "r10"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第10个产生式 代码块 -> id = 算术表达式 ;  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 32: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
buffer: ["int", "id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 28, token: int, action: "s4"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 33: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 4]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "int"]
buffer: ["id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 34: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型"]
buffer: ["id", "=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 21, token: id, action: "s30"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s30 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 35: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id"]
buffer: ["=", "id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 30, token: =, action: "s42"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s42 状态压入状态栈，将 = 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 36: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "="]
buffer: ["id", ";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 42, token: id, action: "s35"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 37: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 35]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "id"]
buffer: [";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 35, token: ;, action: "r24"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第24个产生式 算术表达式 -> id  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 38: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 59]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "算术表达式"]
buffer: [";", "}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 59, token: ;, action: "s77"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s77 状态压入状态栈，将 ; 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 39: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 59, 77]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "算术表达式", ";"]
buffer: ["}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 77, token: }, action: "r9"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第9个产生式 代码块 -> 变量类型 id = 算术表达式 ;  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 40: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
buffer: ["}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 28, token: }, action: "r7"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 41: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
buffer: ["}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 28, token: }, action: "r7"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 42: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
buffer: ["}", "#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 26, token: }, action: "s40"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s40 状态压入状态栈，将 } 符号压入符号栈
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 43: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 40]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "}"]
buffer: ["#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 40, token: #, action: "r4"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第4个产生式 函数定义 -> 变量类型 id ( 形式参数 ) { 代码块 }  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 44: 
state_stack: [0, 2]
symbol_stack: ["#", "函数定义"]
buffer: ["#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 2, token: #, action: "r1"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第1个产生式 程序 -> 函数定义  进行规约
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 45: 
state_stack: [0, 1]
symbol_stack: ["#", "程序"]
buffer: ["#"]
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 1, token: #, action: "acc"
02:38:09 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 接受
02:38:09 [INFO] slr1: true
