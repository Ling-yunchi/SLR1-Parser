15:08:38 [INFO] tokens: [Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "main" }, Token { token_type: Delimiter, token_value: "(" }, Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "a" }, Token { token_type: Delimiter, token_value: "," }, Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "b" }, Token { token_type: Delimiter, token_value: ")" }, Token { token_type: Delimiter, token_value: "{" }, Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "res" }, Token { token_type: Delimiter, token_value: ";" }, Token { token_type: Identifier, token_value: "res" }, Token { token_type: Operator, token_value: "=" }, Token { token_type: Identifier, token_value: "a" }, Token { token_type: Operator, token_value: "+" }, Token { token_type: Identifier, token_value: "b" }, Token { token_type: Delimiter, token_value: ";" }, Token { token_type: Keyword, token_value: "int" }, Token { token_type: Identifier, token_value: "d" }, Token { token_type: Operator, token_value: "=" }, Token { token_type: Identifier, token_value: "a" }, Token { token_type: Delimiter, token_value: ";" }, Token { token_type: Delimiter, token_value: "}" }]
15:08:38 [INFO] grammar: Grammar { s: "程序", v: ["程序'", "程序", "函数定义", "形式参数", "代码块", "变量类型", "算术表达式", "布尔表达式", "比较运算符", "算术运算符"], t: ["id", "value", "(", ")", "{", "}", ",", ";", "=", "while", "if", "else", "return", "int", "float", "double", "bool", "char", "&&", "||", "!", "true", "false", "<", ">", "<=", ">=", "==", "!=", "-", "+", "*", "/"], p: [Product { left: "程序'", right: ["程序"] }, Product { left: "程序", right: ["函数定义"] }, Product { left: "函数定义", right: ["函数定义", "函数定义"] }, Product { left: "函数定义", right: ["变量类型", "id", "(", ")", "{", "代码块", "}"] }, Product { left: "函数定义", right: ["变量类型", "id", "(", "形式参数", ")", "{", "代码块", "}"] }, Product { left: "形式参数", right: ["变量类型", "id"] }, Product { left: "形式参数", right: ["变量类型", "id", ",", "形式参数"] }, Product { left: "代码块", right: ["代码块", "代码块"] }, Product { left: "代码块", right: ["变量类型", "id", ";"] }, Product { left: "代码块", right: ["变量类型", "id", "=", "算术表达式", ";"] }, Product { left: "代码块", right: ["id", "=", "算术表达式", ";"] }, Product { left: "代码块", right: ["while", "(", "布尔表达式", ")", "{", "代码块", "}"] }, Product { left: "代码块", right: ["if", "(", "布尔表达式", ")", "{", "代码块", "}"] }, Product { left: "代码块", right: ["if", "(", "布尔表达式", ")", "{", "代码块", "}", "else", "{", "代码块", "}"] }, Product { left: "代码块", right: ["return", ";"] }, Product { left: "代码块", right: ["return", "算术表达式", ";"] }, Product { left: "变量类型", right: ["int"] }, Product { left: "变量类型", right: ["float"] }, Product { left: "变量类型", right: ["double"] }, Product { left: "变量类型", right: ["bool"] }, Product { left: "变量类型", right: ["char"] }, Product { left: "算术表达式", right: ["算术表达式", "算术运算符", "算术表达式"] }, Product { left: "算术表达式", right: ["-", "算术表达式"] }, Product { left: "算术表达式", right: ["(", "算术表达式", ")"] }, Product { left: "算术表达式", right: ["id"] }, Product { left: "算术表达式", right: ["value"] }, Product { left: "布尔表达式", right: ["算术表达式", "比较运算符", "算术表达式"] }, Product { left: "布尔表达式", right: ["布尔表达式", "&&", "布尔表达式"] }, Product { left: "布尔表达式", right: ["布尔表达式", "||", "布尔表达式"] }, Product { left: "布尔表达式", right: ["!", "布尔表达式"] }, Product { left: "布尔表达式", right: ["(", "布尔表达式", ")"] }, Product { left: "布尔表达式", right: ["true"] }, Product { left: "布尔表达式", right: ["false"] }, Product { left: "比较运算符", right: ["<"] }, Product { left: "比较运算符", right: [">"] }, Product { left: "比较运算符", right: ["<="] }, Product { left: "比较运算符", right: [">="] }, Product { left: "比较运算符", right: ["=="] }, Product { left: "比较运算符", right: ["!="] }, Product { left: "算术运算符", right: ["+"] }, Product { left: "算术运算符", right: ["-"] }, Product { left: "算术运算符", right: ["*"] }, Product { left: "算术运算符", right: ["/"] }] }
15:08:38 [INFO] first: {"false": ["false"], "||": ["||"], "*": ["*"], "char": ["char"], "int": ["int"], "布尔表达式": ["!", "(", "-", "false", "id", "true", "value"], ",": [","], "程序": [], "{": ["{"], "算术运算符": ["*", "+", "-", "/"], "程序'": [], "比较运算符": ["!=", "<", "<=", "==", ">", ">="], "}": ["}"], "while": ["while"], "double": ["double"], "bool": ["bool"], "<": ["<"], "==": ["=="], "float": ["float"], "return": ["return"], "形式参数": ["bool", "char", "double", "float", "int"], "代码块": ["bool", "char", "double", "float", "id", "if", "int", "return", "while"], ")": [")"], "!=": ["!="], ";": [";"], "变量类型": ["bool", "char", "double", "float", "int"], "!": ["!"], "算术表达式": ["(", "-", "id", "value"], "value": ["value"], "-": ["-"], "else": ["else"], "if": ["if"], "函数定义": ["bool", "char", "double", "float", "int"], "/": ["/"], ">=": [">="], "true": ["true"], "id": ["id"], ">": [">"], "=": ["="], "<=": ["<="], "(": ["("], "+": ["+"], "&&": ["&&"]}
15:08:38 [INFO] follow: {"形式参数": [")"], "变量类型": ["id"], "算术运算符": ["(", "-", "id", "value"], "程序": ["#"], "布尔表达式": ["&&", ")", "||"], "函数定义": ["#", "bool", "char", "double", "float", "int"], "算术表达式": ["!=", ")", "*", "+", "-", "/", ";", "<", "<=", "==", ">", ">="], "比较运算符": ["(", "-", "id", "value"], "程序'": [], "代码块": ["bool", "char", "double", "float", "id", "if", "int", "return", "while", "}"]}
15:08:38 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: here!
15:08:40 [INFO] action: [{"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "", "==": "", "+": "", "float": "s5", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "acc", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "", "==": "", "+": "", "float": "s5", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "r1", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s10", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r16", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r17", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r18", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r19", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r20", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "", "==": "", "+": "", "float": "s5", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "r2", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "s11", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "", "==": "", "+": "", "float": "s5", ")": "s14", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "s15", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s16", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "s17", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "s18", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "s19", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "r5", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "", "==": "", "+": "", "float": "s5", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "s29", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s30", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "s31", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "s32", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "s33", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s35", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "s38", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "s36", ">": "", "(": "s37", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "s40", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "r6", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "r7", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r3", "return": "", "==": "", "+": "", "float": "r3", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "r3", "double": "r3", "value": "", ">": "", "(": "", "*": "", "bool": "r3", "char": "r3"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "s42", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "s41", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s35", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "s36", ">": "", "(": "s37", "*": "", "bool": "", "char": ""}, {"false": "s49", ",": "", "<=": "", ">=": "", "id": "s35", "!": "s47", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "s48", "#": "", "double": "", "value": "s36", ">": "", "(": "s46", "*": "", "bool": "", "char": ""}, {"false": "s49", ",": "", "<=": "", ">=": "", "id": "s35", "!": "s47", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "s48", "#": "", "double": "", "value": "s36", ">": "", "(": "s46", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "s56", "while": "", "&&": "", "-": "s53", "else": "", ";": "s52", "<": "", "int": "", "return": "", "==": "", "+": "s54", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "r24", ">=": "r24", "id": "", "!": "", "!=": "r24", "=": "", "/": "r24", "while": "", "&&": "", "-": "r24", "else": "", ";": "r24", "<": "r24", "int": "", "return": "", "==": "r24", "+": "r24", "float": "", ")": "r24", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "r24", "(": "", "*": "r24", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "r25", ">=": "r25", "id": "", "!": "", "!=": "r25", "=": "", "/": "r25", "while": "", "&&": "", "-": "r25", "else": "", ";": "r25", "<": "r25", "int": "", "return": "", "==": "r25", "+": "r25", "float": "", ")": "r25", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "r25", "(": "", "*": "r25", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s35", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "s36", ">": "", "(": "s37", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r14", "!": "", "!=": "", "=": "", "/": "", "while": "r14", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r14", "return": "r14", "==": "", "+": "", "float": "r14", ")": "", "if": "r14", "||": "", "}": "r14", "{": "", "true": "", "#": "", "double": "r14", "value": "", ">": "", "(": "", "*": "", "bool": "r14", "char": "r14"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s35", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "s36", ">": "", "(": "s37", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r4", "return": "", "==": "", "+": "", "float": "r4", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "r4", "double": "r4", "value": "", ">": "", "(": "", "*": "", "bool": "r4", "char": "r4"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r8", "!": "", "!=": "", "=": "", "/": "", "while": "r8", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r8", "return": "r8", "==": "", "+": "", "float": "r8", ")": "", "if": "r8", "||": "", "}": "r8", "{": "", "true": "", "#": "", "double": "r8", "value": "", ">": "", "(": "", "*": "", "bool": "r8", "char": "r8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s35", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "s36", ">": "", "(": "s37", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "s56", "while": "", "&&": "", "-": "s53", "else": "", ";": "s60", "<": "", "int": "", "return": "", "==": "", "+": "s54", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "s64", ">=": "s65", "id": "", "!": "", "!=": "s67", "=": "", "/": "s56", "while": "", "&&": "", "-": "s53", "else": "", ";": "", "<": "s62", "int": "", "return": "", "==": "s66", "+": "s54", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "s63", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "s69", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "s68", "if": "", "||": "s70", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "s49", ",": "", "<=": "", ">=": "", "id": "s35", "!": "s47", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "s48", "#": "", "double": "", "value": "s36", ">": "", "(": "s46", "*": "", "bool": "", "char": ""}, {"false": "s49", ",": "", "<=": "", ">=": "", "id": "s35", "!": "s47", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "s48", "#": "", "double": "", "value": "s36", ">": "", "(": "s46", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "r31", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "r31", "if": "", "||": "r31", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "r32", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "r32", "if": "", "||": "r32", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "s69", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "s74", "if": "", "||": "s70", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s35", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "s36", ">": "", "(": "s37", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r15", "!": "", "!=": "", "=": "", "/": "", "while": "r15", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r15", "return": "r15", "==": "", "+": "", "float": "r15", ")": "", "if": "r15", "||": "", "}": "r15", "{": "", "true": "", "#": "", "double": "r15", "value": "", ">": "", "(": "", "*": "", "bool": "r15", "char": "r15"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r40", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r40", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r40", ">": "", "(": "r40", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r39", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r39", ">": "", "(": "r39", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r41", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r41", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r41", ">": "", "(": "r41", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r42", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r42", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r42", ">": "", "(": "r42", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "s56", "while": "", "&&": "", "-": "s53", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "s54", "float": "", ")": "s76", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "r22", ">=": "r22", "id": "", "!": "", "!=": "r22", "=": "", "/": "s56", "while": "", "&&": "", "-": "s53", "else": "", ";": "r22", "<": "r22", "int": "", "return": "", "==": "r22", "+": "s54", "float": "", ")": "r22", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "r22", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "s56", "while": "", "&&": "", "-": "s53", "else": "", ";": "s77", "<": "", "int": "", "return": "", "==": "", "+": "s54", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r10", "!": "", "!=": "", "=": "", "/": "", "while": "r10", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r10", "return": "r10", "==": "", "+": "", "float": "r10", ")": "", "if": "r10", "||": "", "}": "r10", "{": "", "true": "", "#": "", "double": "r10", "value": "", ">": "", "(": "", "*": "", "bool": "r10", "char": "r10"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s35", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "s36", ">": "", "(": "s37", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r33", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r33", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r33", ">": "", "(": "r33", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r34", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r34", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r34", ">": "", "(": "r34", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r35", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r35", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r35", ">": "", "(": "r35", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r36", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r36", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r36", ">": "", "(": "r36", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r37", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r37", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r37", ">": "", "(": "r37", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r38", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "r38", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "r38", ">": "", "(": "r38", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "s79", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "s49", ",": "", "<=": "", ">=": "", "id": "s35", "!": "s47", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "s48", "#": "", "double": "", "value": "s36", ">": "", "(": "s46", "*": "", "bool": "", "char": ""}, {"false": "s49", ",": "", "<=": "", ">=": "", "id": "s35", "!": "s47", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "s39", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "", "true": "s48", "#": "", "double": "", "value": "s36", ">": "", "(": "s46", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "s64", ">=": "s65", "id": "", "!": "", "!=": "s67", "=": "", "/": "s56", "while": "", "&&": "", "-": "s53", "else": "", ";": "", "<": "s62", "int": "", "return": "", "==": "s66", "+": "s54", "float": "", ")": "s76", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "s63", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "s69", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "s82", "if": "", "||": "s70", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "s69", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "r29", "if": "", "||": "s70", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "s83", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "r21", ">=": "r21", "id": "", "!": "", "!=": "r21", "=": "", "/": "s56", "while": "", "&&": "", "-": "s53", "else": "", ";": "r21", "<": "r21", "int": "", "return": "", "==": "r21", "+": "s54", "float": "", ")": "r21", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "r21", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "r23", ">=": "r23", "id": "", "!": "", "!=": "r23", "=": "", "/": "r23", "while": "", "&&": "", "-": "r23", "else": "", ";": "r23", "<": "r23", "int": "", "return": "", "==": "r23", "+": "r23", "float": "", ")": "r23", "if": "", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "r23", "(": "", "*": "r23", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r9", "!": "", "!=": "", "=": "", "/": "", "while": "r9", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r9", "return": "r9", "==": "", "+": "", "float": "r9", ")": "", "if": "r9", "||": "", "}": "r9", "{": "", "true": "", "#": "", "double": "r9", "value": "", ">": "", "(": "", "*": "", "bool": "r9", "char": "r9"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "s56", "while": "", "&&": "r26", "-": "s53", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "s54", "float": "", ")": "r26", "if": "", "||": "r26", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "s55", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "s69", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "r27", "if": "", "||": "s70", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "s69", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "r28", "if": "", "||": "s70", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "r30", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "r30", "if": "", "||": "r30", "}": "", "{": "", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "s86", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "s87", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r11", "!": "", "!=": "", "=": "", "/": "", "while": "r11", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r11", "return": "r11", "==": "", "+": "", "float": "r11", ")": "", "if": "r11", "||": "", "}": "r11", "{": "", "true": "", "#": "", "double": "r11", "value": "", ">": "", "(": "", "*": "", "bool": "r11", "char": "r11"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r12", "!": "", "!=": "", "=": "", "/": "", "while": "r12", "&&": "", "-": "", "else": "s88", ";": "", "<": "", "int": "r12", "return": "r12", "==": "", "+": "", "float": "r12", ")": "", "if": "r12", "||": "", "}": "r12", "{": "", "true": "", "#": "", "double": "r12", "value": "", ">": "", "(": "", "*": "", "bool": "r12", "char": "r12"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "", "!": "", "!=": "", "=": "", "/": "", "while": "", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "", "return": "", "==": "", "+": "", "float": "", ")": "", "if": "", "||": "", "}": "", "{": "s89", "true": "", "#": "", "double": "", "value": "", ">": "", "(": "", "*": "", "bool": "", "char": ""}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "s22", "!": "", "!=": "", "=": "", "/": "", "while": "s23", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "s4", "return": "s25", "==": "", "+": "", "float": "s5", ")": "", "if": "s24", "||": "", "}": "s91", "{": "", "true": "", "#": "", "double": "s6", "value": "", ">": "", "(": "", "*": "", "bool": "s7", "char": "s8"}, {"false": "", ",": "", "<=": "", ">=": "", "id": "r13", "!": "", "!=": "", "=": "", "/": "", "while": "r13", "&&": "", "-": "", "else": "", ";": "", "<": "", "int": "r13", "return": "r13", "==": "", "+": "", "float": "r13", ")": "", "if": "r13", "||": "", "}": "r13", "{": "", "true": "", "#": "", "double": "r13", "value": "", ">": "", "(": "", "*": "", "bool": "r13", "char": "r13"}]
15:08:40 [INFO] goto: [{"代码块": "", "布尔表达式": "", "变量类型": "3", "比较运算符": "", "程序'": "", "函数定义": "2", "算术表达式": "", "形式参数": "", "程序": "1", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "3", "比较运算符": "", "程序'": "", "函数定义": "9", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "3", "比较运算符": "", "程序'": "", "函数定义": "9", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "13", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "12", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "20", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "26", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "13", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "27", "程序": "", "算术运算符": ""}, {"代码块": "28", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "34", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "28", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "28", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "43", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "45", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "44", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "50", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "44", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "57", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "58", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "59", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "61", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "72", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "71", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "73", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "44", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "75", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "78", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "80", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "44", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "81", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "44", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "61", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": "51"}, {"代码块": "84", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "85", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "28", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "28", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "90", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "28", "布尔表达式": "", "变量类型": "21", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}, {"代码块": "", "布尔表达式": "", "变量类型": "", "比较运算符": "", "程序'": "", "函数定义": "", "算术表达式": "", "形式参数": "", "程序": "", "算术运算符": ""}]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: init buffer: ["int", "id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 1: 
state_stack: [0]
symbol_stack: ["#"]
buffer: ["int", "id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 0, token: int, action: "s4"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 2: 
state_stack: [0, 4]
symbol_stack: ["#", "int"]
buffer: ["id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 3: 
state_stack: [0, 3]
symbol_stack: ["#", "变量类型"]
buffer: ["id", "(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 3, token: id, action: "s10"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s10 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 4: 
state_stack: [0, 3, 10]
symbol_stack: ["#", "变量类型", "id"]
buffer: ["(", "int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 10, token: (, action: "s11"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s11 状态压入状态栈，将 ( 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 5: 
state_stack: [0, 3, 10, 11]
symbol_stack: ["#", "变量类型", "id", "("]
buffer: ["int", "id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 11, token: int, action: "s4"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 6: 
state_stack: [0, 3, 10, 11, 4]
symbol_stack: ["#", "变量类型", "id", "(", "int"]
buffer: ["id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 7: 
state_stack: [0, 3, 10, 11, 13]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型"]
buffer: ["id", ",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 13, token: id, action: "s16"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s16 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 8: 
state_stack: [0, 3, 10, 11, 13, 16]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id"]
buffer: [",", "int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 16, token: ,, action: "s19"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s19 状态压入状态栈，将 , 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 9: 
state_stack: [0, 3, 10, 11, 13, 16, 19]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ","]
buffer: ["int", "id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 19, token: int, action: "s4"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 10: 
state_stack: [0, 3, 10, 11, 13, 16, 19, 4]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "int"]
buffer: ["id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 11: 
state_stack: [0, 3, 10, 11, 13, 16, 19, 13]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "变量类型"]
buffer: ["id", ")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 13, token: id, action: "s16"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s16 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 12: 
state_stack: [0, 3, 10, 11, 13, 16, 19, 13, 16]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "变量类型", "id"]
buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 16, token: ), action: "r5"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第5个产生式 形式参数 -> 变量类型 id  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 13: 
state_stack: [0, 3, 10, 11, 13, 16, 19, 27]
symbol_stack: ["#", "变量类型", "id", "(", "变量类型", "id", ",", "形式参数"]
buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 27, token: ), action: "r6"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第6个产生式 形式参数 -> 变量类型 id , 形式参数  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 14: 
state_stack: [0, 3, 10, 11, 12]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数"]
buffer: [")", "{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 12, token: ), action: "s15"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s15 状态压入状态栈，将 ) 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 15: 
state_stack: [0, 3, 10, 11, 12, 15]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")"]
buffer: ["{", "int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 15, token: {, action: "s18"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s18 状态压入状态栈，将 { 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 16: 
state_stack: [0, 3, 10, 11, 12, 15, 18]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{"]
buffer: ["int", "id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 18, token: int, action: "s4"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 17: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 4]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "int"]
buffer: ["id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 18: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 21]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型"]
buffer: ["id", ";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 21, token: id, action: "s30"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s30 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 19: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 21, 30]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型", "id"]
buffer: [";", "id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 30, token: ;, action: "s41"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s41 状态压入状态栈，将 ; 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 20: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 21, 30, 41]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "变量类型", "id", ";"]
buffer: ["id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 41, token: id, action: "r8"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第8个产生式 代码块 -> 变量类型 id ;  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 21: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
buffer: ["id", "=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 26, token: id, action: "s22"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s22 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 22: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id"]
buffer: ["=", "id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 22, token: =, action: "s31"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s31 状态压入状态栈，将 = 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 23: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "="]
buffer: ["id", "+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 31, token: id, action: "s35"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 24: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 35]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "id"]
buffer: ["+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 35, token: +, action: "r24"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第24个产生式 算术表达式 -> id  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 25: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
buffer: ["+", "id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 43, token: +, action: "s54"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s54 状态压入状态栈，将 + 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 26: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 54]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "+"]
buffer: ["id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 54, token: id, action: "r39"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第39个产生式 算术运算符 -> +  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 27: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符"]
buffer: ["id", ";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 51, token: id, action: "s35"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 28: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51, 35]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符", "id"]
buffer: [";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 35, token: ;, action: "r24"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第24个产生式 算术表达式 -> id  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 29: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 51, 75]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", "算术运算符", "算术表达式"]
buffer: [";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 75, token: ;, action: "r21"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第21个产生式 算术表达式 -> 算术表达式 算术运算符 算术表达式  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 30: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式"]
buffer: [";", "int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 43, token: ;, action: "s60"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s60 状态压入状态栈，将 ; 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 31: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 22, 31, 43, 60]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "id", "=", "算术表达式", ";"]
buffer: ["int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 60, token: int, action: "r10"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第10个产生式 代码块 -> id = 算术表达式 ;  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 32: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
buffer: ["int", "id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 28, token: int, action: "s4"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s4 状态压入状态栈，将 int 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 33: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 4]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "int"]
buffer: ["id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 4, token: id, action: "r16"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第16个产生式 变量类型 -> int  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 34: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型"]
buffer: ["id", "=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 21, token: id, action: "s30"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s30 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 35: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id"]
buffer: ["=", "id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 30, token: =, action: "s42"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s42 状态压入状态栈，将 = 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 36: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "="]
buffer: ["id", ";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 42, token: id, action: "s35"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s35 状态压入状态栈，将 id 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 37: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 35]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "id"]
buffer: [";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 35, token: ;, action: "r24"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第24个产生式 算术表达式 -> id  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 38: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 59]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "算术表达式"]
buffer: [";", "}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 59, token: ;, action: "s77"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s77 状态压入状态栈，将 ; 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 39: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 21, 30, 42, 59, 77]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "变量类型", "id", "=", "算术表达式", ";"]
buffer: ["}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 77, token: }, action: "r9"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第9个产生式 代码块 -> 变量类型 id = 算术表达式 ;  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 40: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28, 28]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块", "代码块"]
buffer: ["}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 28, token: }, action: "r7"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 41: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 28]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "代码块"]
buffer: ["}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 28, token: }, action: "r7"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第7个产生式 代码块 -> 代码块 代码块  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 42: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块"]
buffer: ["}", "#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 26, token: }, action: "s40"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 移进: 将 s40 状态压入状态栈，将 } 符号压入符号栈
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 43: 
state_stack: [0, 3, 10, 11, 12, 15, 18, 26, 40]
symbol_stack: ["#", "变量类型", "id", "(", "形式参数", ")", "{", "代码块", "}"]
buffer: ["#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 40, token: #, action: "r4"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第4个产生式 函数定义 -> 变量类型 id ( 形式参数 ) { 代码块 }  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 44: 
state_stack: [0, 2]
symbol_stack: ["#", "函数定义"]
buffer: ["#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 2, token: #, action: "r1"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 规约: 按照第1个产生式 程序 -> 函数定义  进行规约
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: step 45: 
state_stack: [0, 1]
symbol_stack: ["#", "程序"]
buffer: ["#"]
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: state: 1, token: #, action: "acc"
15:08:40 [DEBUG] (2) SLR1_Parser::parser::syntax_analysis: 接受
15:08:40 [INFO] slr1: true
